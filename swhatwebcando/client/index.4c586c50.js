class e{constructor(e,t,n=!0,o=""){this.passed=e,this.property=t,this.standard=n,this.prefix=o}get message(){return this.standard?this.passed?this.prefix?"✔ Prefixed":"✔ Supported":"❌ Not supported":this.passed?"Supported with non-standard solution":"Non-standard solution not supported"}static forPassed(t,n,o){return Promise.resolve(new e(!0,t,n,o))}static forFailed(t,n){return Promise.resolve(new e(!1,t,n))}}class t{constructor(e,t,n,o=!0){this.containerName=e,this.property=t,this.test=n,this.standard=o}get result(){return(this.test()?e.forPassed:e.forFailed)(this.property,this.standard)}}class n{constructor(e,t,n,o=!0){this.containerName=e,this.property=n,this.standard=o,Object.defineProperties(this,{$container:{value:t,enumerable:!1}})}$capitalizeFirst(e){return e.substr(0,1).toUpperCase()+e.substr(1)}get result(){let t=this.$container,n=this.property;if(!t)return e.forFailed(n,this.standard);if(n in t)return e.forPassed(n,this.standard);let o=this.$capitalizeFirst(n);for(let i of["moz","webkit","ms"]){if(i+n in t)return e.forPassed(n,this.standard,i);if(i+o in t)return e.forPassed(o,this.standard,i);let a=this.$capitalizeFirst(i);if(a+o in t)return e.forPassed(o,this.standard,a)}return e.forFailed(n,this.standard)}}class o{constructor(e,t,n,o=!0){this.containerName=e,this.property=t,this.test=n,this.standard=o}get result(){return this.test().then(t=>(t?e.forPassed:e.forFailed)(this.property,this.standard))}}class i{constructor(e){if(!e)throw"Feature is missing";this.id=e.id,this.aliases=e.aliases||[],this.name=e.name,this.description=("string"==typeof e.description?[e.description]:e.description)||[],this.api=e.api,this.caniuseKey=e.caniuse,this.tests=e.tests||[],this.demo=e.demo,this.demoPen=e.demoPen,this.links=e.links||[]}async determineIsSupported(){if(!this.tests.length)throw"no tests";return!!(await Promise.all(this.tests.map(e=>e.result))).find(e=>e.passed)}static containedIn(e,t,o,i){return new n(e,t,o,i)}static navigatorContains(e,t){return i.containedIn("navigator","undefined"!=typeof window&&window.navigator,e,t)}static documentContains(e,t){return i.containedIn("document","undefined"!=typeof window&&window.document,e,t)}static windowContains(e,t){return i.containedIn("window","undefined"!=typeof window&&window,e,t)}static serviceWorkerRegistrationContains(e,t){return i.containedIn("ServiceWorkerRegistration","undefined"!=typeof window&&window.ServiceWorkerRegistration&&window.ServiceWorkerRegistration.prototype,e,t)}static rawTest(e,n,o){return new t(e,n,o)}static asyncRawTest(e,t,n){return new o(e,t,n)}}const a=[new i({id:"local-notifications",name:"Local Notifications",description:["Notifications, available through the <b>Notifications API</b>, allow authorized Web applications to draw users attention\n         in a bold but standardized fashion. Notifications are generated by the Web application running in a browsers' tab to be presented\n         to the user outside of the browser tab area.",'Specification-wise, there are two distinct kinds of notifications in the Web - persistent and non-persistent. Persistent notifications\n         are deliverable and possible to interact with also when the Web application that generated it is no longer active (i.e. the tab was closed)\n         while non-persistent notifications require the tab to be active. Implementation-wise, persistent notifications require active Service Worker\n         registration (but it should not be confused with <a href="/push-notifications.html">Push Messages</a> that also go through the Service\n         Worker, but are triggered from the outside of the application).'],api:"<dl>\n        <dt><code>Notification.requestPermission([callback])</code></dt>\n        <dd>Asks a user for the permission to show Notifications. Returns a <code>Promise</code> with the prompt result. As a legacy, it also calls <code>callback</code> function, if provided.</dd>\n        <dt><code>Notification.permission</code></dt>\n        <dd>Returns current permission state - <code>default</code> (user not yet decided), <code>granted</code> or <code>denied</code>.</dd>\n        <dt><code>new Notification(title, [options])</code></dt>\n        <dd>Displays local <b>non-persistent</b> notification outside of the browser tab area.</dd>\n        <dt><code>navigator.serviceWorker.getRegistration()</code><br>\n        <code>&nbsp;&nbsp;.then((reg) => reg.showNotification(title, [options]))</code></dt>\n        <dd>Displays local <b>persistent</b> notification outside of the browser tab area.</dd>\n      </dl>",caniuse:"notifications",tests:[i.rawTest("window","Notification",()=>{try{return"Notification"in window&&("silent"in Notification.prototype&&new Notification("test",{silent:!0,vibrate:100}),!0)}catch(e){return-1!==e.message.indexOf("Silent")}}),i.serviceWorkerRegistrationContains("showNotification")],demo:{html:'<p>Current permission status is <b id="status">unavailable</b>.</p>\n\n<p><button onclick="requestPermission()">Request permission</button></p>\n<p><button onclick="nonPersistentNotification()">Non-persistent notification</button></p>\n<p><button onclick="persistentNotification()">Persistent notification</button></p>',js:"var $status = document.getElementById('status');\n\nif ('Notification' in window) {\n  $status.innerText = Notification.permission;\n}\n\nfunction requestPermission() {\n  if (!('Notification' in window)) {\n    alert('Notification API not supported!');\n    return;\n  }\n  \n  Notification.requestPermission(function (result) {\n    $status.innerText = result;\n  });\n}\n\nfunction nonPersistentNotification() {\n  if (!('Notification' in window)) {\n    alert('Notification API not supported!');\n    return;\n  }\n  \n  try {\n    var notification = new Notification(\"Hi there - non-persistent!\");\n  } catch (err) {\n    alert('Notification API error: ' + err);\n  }\n}\n\nfunction persistentNotification() {\n  if (!('Notification' in window) || !('ServiceWorkerRegistration' in window)) {\n    alert('Persistent Notification API not supported!');\n    return;\n  }\n  \n  try {\n    navigator.serviceWorker.getRegistration()\n      .then((reg) => reg.showNotification(\"Hi there - persistent!\"))\n      .catch((err) => alert('Service Worker registration error: ' + err));\n  } catch (err) {\n    alert('Notification API error: ' + err);\n  }\n}"},links:[{url:"https://notifications.spec.whatwg.org/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API",title:"MDN: Notifications API"},{url:"http://www.sitepoint.com/introduction-web-notifications-api/",title:"SitePoint: An Introduction to the Web Notifications API"},{url:"https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM",title:"PSA: Android is *only* shipping Service Worker-based Notifications"},{url:"http://ukot.github.io/ie_web_notifications/",title:"IE Web Notifications plugin"}]}),new i({id:"push-notifications",name:"Push Messages",description:["Push Messaging is the well-known re-engagement mechanism from the mobile platforms. It\n         allows the authorized Web applications to subscribe the user for the remotely sent messages that can trigger displaying a notification\n         to the subscriber even if the Web application is not currently focused or even opened in the browser. The message can convey encrypted\n         payload and can request displaying custom action buttons.",'The Web Platform standard for Push Messages, <b>Push API</b>, utilizes the powerful concept of <b><a href="/offline.html">Service\n         Workers</a></b>, code units installable by the Web app that execute separately from the app itself. Push API also requires HTTPS installation.','There is also a non-standard <a href="https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NotificationProgrammingGuideForWebsites/PushNotifications/PushNotifications.html#//apple_ref/doc/uid/TP40013225-CH3-SW1" target="_blank" rel="noopener">proprietary\n         solution available for OS X in Safari</a>, based on Apple\'s own notification service, with the workflow similar to standard Push API, available via\n          <code>window.safari.pushNotification</code> interface.'],api:"<dl>\n        <dt><code>serviceWorkerRegistration.pushManager.subscribe()</code></dt>\n        <dd>Subscribes a user for the remote Push Messages. Returns a <code>Promise</code>.</dd>\n        <dt><code>serviceWorkerRegistration.pushManager.getSubscription()</code></dt>\n        <dd>Returns a <code>Promise</code> indicating current Push Messages subscription state.</dd>\n        <dt><code>serviceWorker.addEventListener('push', listener)</code></dt>\n        <dd>An event fired when remote push message has been received, available within Service Worker instance.</dd>\n      </dl>",caniuse:"push-api",tests:[i.windowContains("PushManager"),i.containedIn("window.safari","undefined"!=typeof window&&window.safari,"pushNotification",!1)],links:[{url:"https://w3c.github.io/push-api/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/03/push-notificatons-on-the-open-web",title:"Push Notifications on the Open Web - Chrome tutorial"},{url:"https://hacks.mozilla.org/2015/10/keep-pushing-it-with-the-w3c-push-api/",title:"Keep pushing it, with the W3C Push API"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API",title:"MDN: Using the Push API"},{url:"https://goroost.com/try-chrome-push-notifications",title:"Chrome Push Notifications demo"},{url:"https://developers.google.com/web/updates/2016/01/notification-actions",title:"Google Developers: Notification Actions in Chrome 48"},{url:"https://developers.google.com/web/updates/2016/03/web-push-encryption",title:"Google Developers: Web Push Payload Encryption"}]}),new i({id:"offline",name:"Offline Mode",description:['Web applications can provide the offline experience using two techniques. The older implementation,\n        <b>Application Cache</b>, is <a href="http://caniuse.com/#feat=offline-apps" target="_blank" rel="noopener">widely implemented</a> in the browsers,\n        but is now in the process of deprecation due to <a href="http://alistapart.com/article/application-cache-is-a-douchebag" target="_blank" rel="noopener">various\n        conceptual and design flaws</a>. It is not covered here.','The modern alternative is called <b>Cache API</b> and is available within Service Worker – the separate code unit the Web applications running on HTTPS can request the browser to install. \n        This unit is then run in separation from the owning Web application, communicating with it via events. Service Worker is the basic building block of the \n        <b><a href="https://developers.google.com/web/progressive-web-apps" target="_blank" rel="noopener">Progressive Web Apps</a></b> (PWA) idea.\n        Besides being the enabler for multiple complex APIs like <a href="/push-notifications.html">Push Notifications</a>, <a href="/background-sync.html">Background Sync</a>\n        or <a href="/geofencing.html">Geofencing</a>, it can work as a fully featured network proxy. It can intercept all the HTTP requests, alter its content or behaviors,\n        or - most notably - manage offline caching.','The content being added to Cache API might be additionally indexed and exposed to the browser using <b>Content Indexing API</b>. As of Spring 2020, this is an early-stage proposal by Google Chrome,\n        available only in this browser on Android via <a href="https://developers.chrome.com/origintrials/#/view_trial/2272066012008415233" target="_blank" rel="noopener">Origin Trial experimentation</a>.\n        The entries added to the index should be cached in Cache API and served offline via Service Worker. The browser might then present the indexed entries for the user while being offline.'],api:"<p><b>Within the owning Web application - Installation</b></p>\n    <dl>\n      <dt><code>navigator.serviceWorker.register(path)</code></dt>\n      <dd>Installs the Service Worker code available under <code>path</code>. Returns a <code>Promise</code>.</dd>\n      <dt><code>navigator.serviceWorker.ready</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with <code>serviceWorkerRegistration</code> when the Worker is initialized.</dd>\n      <dt><code>serviceWorkerRegistration.update()</code></dt>\n      <dd>Checks the server for an updated version of the Service Worker without consulting caches.</dd>\n      <dt><code>serviceWorkerRegistration.unregister()</code></dt>\n      <dd>Uninstalls the Service Worker.</dd>\n    </dl>\n    \n    <p><b>Within the Service Worker instance - Cache prefetch</b></p>\n    <pre><code>self.addEventListener('install', function (event) {\n  event.waitUntil(\n    caches.open('my-cache-v1')\n      .then(function (cache) {\n        return cache.addAll(['/', '/styles/main.css', '/scripts/main.js']);\n      })\n  );\n});</code></pre>\n    <dl>\n      <dt><code>self.addEventListener('install', listener)</code></dt>\n      <dd>An event fired within the Service Worker when it is being installed. Useful to prefetch the resources needed in the offline mode and to prefill the cache.</dd>\n      <dt><code>event.waitUntil(promise)</code></dt>\n      <dd>An install event method that expects a <code>Promise</code> which signals the end of the worker's installation phase when resolved.</dd>\n      <dt><code>caches.open(cacheName)</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with the named cache accessor object that is able to keep the resources needed for the offline mode.</dd>\n      <dt><code>cache.addAll(urls)</code></dt>\n      <dd>Adds all the resources specified with the URLs to the named cache for the future, possibly offline, use.</dd>\n    </dl>\n    \n    <p><b>Within the Service Worker instance - Requests cache</b></p>\n    <pre><code>function isSuccessful(response) {\n  return response &&\n    response.status === 200 &&\n    response.type === 'basic';\n}\n\nself.addEventListener('fetch', function (event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function (response) {\n        if (response) {\n          return response; // Cache hit\n        }\n\n        return fetch(event.request.clone())\n          .then(function (response) {\n            if (!isSuccessful(response)) {\n              return response;\n            }\n\n            caches.open(CACHE_NAME)\n              .then(function (cache) {\n                cache.put(event.request, response.clone());\n              });\n\n            return response;\n          }\n        );\n      })\n    );\n});</code></pre>\n    <dl>\n      <dt><code>self.addEventListener('fetch', listener)</code></dt>\n      <dd>An event fired within the Service Worker whenever any of its related browser tabs have issued a HTTP request. Useful to serve already cached response\n        or intercept and cache the incoming response.</dd>\n      <dt><code>event.respondWith(promise)</code></dt>\n      <dd>A fetch event method that expects a <code>Promise</code> which resolves with the request data to be returned to the requesting browser tab.</dd>\n      <dt><code>cache.put(request, response)</code></dt>\n      <dd>Adds the specified response for the request to the named cache for the future, possibly offline, use.</dd>\n      <dt><code>caches.match(event.request)</code></dt>\n      <dd>Returns a <code>Promise</code> resolved when the <code>fetch</code> event represents a request to the resource already cached within\n        the Service Worker's cache.</dd>\n    </dl>\n    \n    <p>See also <b><a href=\"/service-worker.js\" target=\"_blank\">this website's own Service Worker implementation</a></b>.</p>\n\n    <p><b>Content Indexing API (Google Chrome experimentation)</b></p>\n    <dl>\n      <dt><code>serviceWorkerRegistration.index.add({id, url, title, description, icons, category})</code></dt>\n      <dd>Adds an entry identified by <code>id</code> to the offline index, with its metadata. It does not cache the entry – it needs to be separately added using Cache API.</dd>\n      <dt><code>serviceWorkerRegistration.index.delete(id)</code></dt>\n      <dd>Removes the previously added entry identified by <code>id</code> from the offline index.</dd>\n      <dt><code>serviceWorkerRegistration.index.getAll()</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with the list of entries previously added to the index.</dd>\n      <dt><code>self.addEventListener('contentdelete', listener)</code></dt>\n      <dd>An event fired within the Service Worker when the entry from the index has been deleted by the user. Useful for removing the resources from the Cache API.</dd>\n    </dl>",caniuse:"serviceworkers",tests:[i.navigatorContains("serviceWorker"),i.windowContains("caches"),i.serviceWorkerRegistrationContains("index")],links:[{url:"http://www.w3.org/TR/service-workers/",title:"Service Workers Specification Draft"},{url:"https://developers.google.com/web/fundamentals/primers/service-workers",title:"Service Workers: an Introduction"},{url:"https://jakearchibald.com/2014/offline-cookbook/",title:"The offline cookbook"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API",title:"ServiceWorker API - MDN docs"},{url:"https://googlechrome.github.io/samples/service-worker/prefetch/index.html",title:"Service Worker Sample: Pre-fetching Resources During Registration"},{url:"https://medium.com/@slsoftworks/beyond-offline-bf5c013ec8e7",title:"Beyond Offline: Using a custom service worker to expand on your browser’s capabilities"},{url:"https://ponyfoo.com/articles/serviceworker-revolution",title:"ServiceWorker: Revolution of the Web Platform"},{url:"https://jakearchibald.github.io/isserviceworkerready/resources.html",title:"Is ServiceWorker Ready? - Jake Archibald"},{url:"https://css-tricks.com/serviceworker-for-offline/",title:"Making a Simple Site Work Offline with ServiceWorker"},{url:"https://web.dev/content-indexing-api/",title:"Indexing your offline-capable pages with the Content Indexing API"}]}),new i({id:"installation",name:"Home Screen Installation",description:['Web applications can provide the <code>manifest.json</code> file, standardized as the <b>Web Manifest</b>, specifying the features\n       and behaviors needed in order to treat the application as a first-class citizen on the target platform, i.e. adding ("installing") to the home screen\n       with the relevant icon, full screen behaviors, themes, standalone appearance without browser bar etc. It can also serve as a centralized place\n       to put all the metadata associated with the Web application.','Having the Web Manifest is one of the key factors (apart from being served via HTTPS and providing\n       a Service Worker-based offline behavior – see <a href="/offline.html">Offline Mode</a>) for the Web applications to be treated\n       as a <b><a href="https://developers.google.com/web/progressive-web-apps" target="_blank" rel="noopener">Progressive Web App</a></b> (PWA). Such applications\n       get "add to home screen" UX in most desktop and Android browsers, i.e. the icon in the address bar.',"Google Chrome additionally presents an additional on-screen banner prompting user to install the app based on usage heuristic. The banner might be cancelled\n      or replaced with custom installation UX using <code>beforeinstallprompt</code> event.","When the application is added to the home screen, its icon might additionally present a badge (notification dot or number) using <b>Badging API</b>, as of Spring 2020 available in Google Chrome only.",'Browser-assisted adding to the home screen also used to be possible on iOS using <a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="noopener">non-standard Apple meta tags</a>\n       describing icons and allowing to run without the Safari UI (standalone mode).'],api:'<p><b>Manifest Elements</b></p>\n<pre><code>{\n  "short_name": "Example App",\n  "name": "The Example Application",\n  "icons": [\n    {\n      "src": "launcher-icon-1x.png",\n      "sizes": "48x48"\n    },\n    {\n      "src": "launcher-icon-2x.png",\n      "sizes": "96x96"\n    }\n  ],\n  "theme_color": "#ff0000",\n  "background_color": "#ff0000",\n  "start_url": "index.html",\n  "display": "standalone"\n}</code></pre>\n<p>See also <b><a href="manifest.json" target="_blank">this website\'s own manifest.json</a></b>.</p>\n<p><b>Install Banner API</b></p>\n<dl>\n  <dt><code>window.addEventListener(\'beforeinstallprompt\')</code></dt>\n  <dd>An event fired when the browser\'s heuristic decides to display the "add to home screen" banner to the user. Allows tracking the user\'s decision and presenting the banner from the custom UI.</dd>\n  <dt><code>event.prompt()</code></dt>\n  <dd>Triggers displaying the "add to home screen" banner from the custom UI.</dd>\n  <dt><code>event.userChoice</code></dt>\n  <dd>Returns <code>Promise</code> resolved with the outcome of the "add to home screen" banner – either <code>accepted</code> or <code>dismissed</code>.</dd>\n  <dt><code>window.addEventListener(\'appinstalled\')</code></dt>\n  <dd>An event fired when the Web application has been successfully added to the user\'s home screen.</dd>\n</dl>\n\n<p><b>Badging API</b></p>\n<dl>\n  <dt><code>navigator.setAppBadge([number])</code></dt>\n  <dd>Sets the badge (dot) on the installed app\'s icon on the home screen, with the optional <code>number</code> in case the underlying platform allows it.</dd>\n  <dt><code>navigator.clearAppBadge()</code></dt>\n  <dd>Clears the previously set badge from the installed app\'s icon.</dd>\n</dl>',caniuse:"web-app-manifest",tests:[i.windowContains("BeforeInstallPromptEvent"),i.navigatorContains("setAppBadge")],links:[{url:"https://w3c.github.io/manifest/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android?hl=en",title:"Installable Web Apps with the WebApp Manifest in Chrome for Android"},{url:"http://html5doctor.com/web-manifest-specification/",title:"HTML5 Doctor: The Web Manifest specification"},{url:"http://brucelawson.github.io/manifest/",title:"Manifest Generator by Bruce Lawson"},{url:"https://pwa.rocks/",title:"A selection of Progressive Web Apps"},{url:"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/",title:"Google Developers: Web App Install Banners"},{url:"https://web.dev/badging-api/",title:"Badging for app icons"}]}),new i({id:"foreground-detection",name:"Foreground Detection",description:["The <b>Page Visibility API</b> is useful for the Web application to know whether it is currently displayed on the front or not,\n      especially to stop resource-intensive UI animations or data refreshing when it is not needed. On the mobile devices,\n      the primary reason for that is to reduce the battery usage.",'This API does not detect the scenario when the page is still displayed on screen, but the user is idle (for example away). To detect this, the separate <a href="/idle.html">API proposal</a> exists.','This API might be complemented with <a href="/freeze-resume.html">Freeze/Resume states detection</a> to detect system-level generated lifecycle events for the application.'],api:"<dl>\n        <dt><code>document.hidden</code></dt>\n        <dd>Returns <code>true</code> if the page is currently hidden.</dd>\n        <dt><code>document.visibilityState</code></dt>\n        <dd>Returns current visibility state: <code>visible</code>, <code>hidden</code>, <code>prerender</code> or <code>unloaded</code>.</dd>\n        <dt><code>document.addEventListener('visibilitychange')</code></dt>\n        <dd>An event fired when the visibility state of the page has changed.</dd>\n      </dl>",caniuse:"pagevisibility",demo:{html:'<p>Switch the browser tab to see the changes.</p>\n<p>Initial page visibility was <b id="status">unknown</b>.</p>\n<div id="target"></div>\n<p><small>Based on the demo from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="noopener">MDN</a>.</small></p>',js:'var target = document.getElementById(\'target\');\n\nvar hidden, visibilityChange;\nif (typeof document.hidden !== "undefined") {\n  hidden = "hidden";\n  visibilityChange = "visibilitychange";\n} else if (typeof document.mozHidden !== "undefined") {\n  hidden = "mozHidden";\n  visibilityChange = "mozvisibilitychange";\n} else if (typeof document.msHidden !== "undefined") {\n  hidden = "msHidden";\n  visibilityChange = "msvisibilitychange";\n} else if (typeof document.webkitHidden !== "undefined") {\n  hidden = "webkitHidden";\n  visibilityChange = "webkitvisibilitychange";\n} else {\n  target.innerText = \'Page Visibility API not supported.\';\n}\n\nfunction handleVisibilityChange() {\n  var timeBadge = new Date().toTimeString().split(\' \')[0];\n  var newState = document.createElement(\'p\');\n  newState.innerHTML = \'<span class="badge">\' + timeBadge + \'</span> Page visibility changed to <b>\' + (document[hidden] ? \'hidden\' : \'visible\') + \'</b>.\';\n  target.appendChild(newState);\n}\n\ndocument.addEventListener(visibilityChange, handleVisibilityChange, false);\n\nif (hidden in document) {\n  document.getElementById(\'status\').innerHTML = document[hidden] ? \'hidden\' : \'visible\';\n}',jsOnExit:"document.removeEventListener(visibilityChange, handleVisibilityChange);"},tests:[i.documentContains("visibilityState")],links:[{url:"https://w3c.github.io/page-visibility/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API",title:"MDN: Page Visibility API"},{url:"http://www.sitepoint.com/introduction-to-page-visibility-api/",title:"SitePoint: Introduction to Page Visibility API"}]}),new i({id:"geolocation",name:"Geolocation",description:["The <b>Geolocation API</b> lets authorized Web applications to access the location data provided by the device -\n        obtained using either GPS or from the network environment. Apart from the one-off location query, it gives a way for the app to be notified\n        about the location changes.",'See <a href="/permissions.html">Permissions</a> for a way to check whether the user has granted or denied the permission to obtain the location by the origin.'],api:"<dl>\n        <dt><code>navigator.geolocation.getCurrentPosition(callback)</code></dt>\n        <dd>Runs one-off query for location with coordinates, accuracy, altitude & speed, if available.</dd>\n        <dt><code>navigator.geolocation.watchPosition(callback)</code></dt>\n        <dd>Sets up observing for location changes, invoking callback for every change.</dd>\n      </dl>",caniuse:"geolocation",demo:{html:'<button id="askButton">Ask for location</button>\n\n<div id="target"></div>',js:"var target = document.getElementById('target');\nvar watchId;\n\nfunction appendLocation(location, verb) {\n  verb = verb || 'updated';\n  var newLocation = document.createElement('p');\n  newLocation.innerHTML = 'Location ' + verb + ': <a href=\"https://maps.google.com/maps?&z=15&q=' + location.coords.latitude + '+' + location.coords.longitude + '&ll=' + location.coords.latitude + '+' + location.coords.longitude + '\" target=\"_blank\" rel=\"noopener\">' + location.coords.latitude + ', ' + location.coords.longitude + '</a>';\n  target.appendChild(newLocation);\n}\n\nif ('geolocation' in navigator) {\n  document.getElementById('askButton').addEventListener('click', function () {\n    navigator.geolocation.getCurrentPosition(function (location) {\n      appendLocation(location, 'fetched');\n    });\n    watchId = navigator.geolocation.watchPosition(appendLocation);\n  });\n} else {\n  target.innerText = 'Geolocation API not supported.';\n}",jsOnExit:"if (watchId) navigator.geolocation.clearWatch(watchId)"},tests:[i.navigatorContains("geolocation")],links:[{url:"http://www.w3.org/TR/geolocation-API/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation",title:"MDN: Using geolocation"}]}),new i({id:"bluetooth",name:"Bluetooth",description:["The <b>Web Bluetooth API</b> is a low-level API allowing Web applications to pair with the nearby Bluetooth Low Energy-enabled peripheral devices and access their services exposed."],api:"<dl>\n        <dt><code>navigator.bluetooth.requestDevice(serviceFilters)</code></dt>\n        <dd>Scans for the device in range supporting the requested services. Returns a <code>Promise</code>.</dd>\n        <dt><code>device.gatt.connect()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the server object providing access to the services available on the device.</dd>\n        <dt><code>server.getPrimaryService(name)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the particular Bluetooth service on the device.</dd>\n        <dt><code>service.getCharacteristic(name)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the GATT characteristic object.</dd>\n        <dt><code>characteristic.readValue()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with a raw value from the GATT characteristic.</dd>\n        <dt><code>characteristic.writeValue(value)</code></dt>\n        <dd>Writes a new value for the GATT characteristic.</dd>\n      </dl>",tests:[i.navigatorContains("bluetooth")],caniuse:"web-bluetooth",demo:{html:'<p>\n  <button onclick="readBatteryLevel()">Read Bluetooth device\'s<br>battery level</button>\n</p>\n\n<p id="target"></p>\n\n<p><small>Based on code snippets from <a href="https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web" target="_blank" rel="noopener">Google Developers</a>.</small></p>',js:"function readBatteryLevel() {\n  var $target = document.getElementById('target');\n  \n  if (!('bluetooth' in navigator)) {\n    $target.innerText = 'Bluetooth API not supported.';\n    return;\n  }\n  \n  navigator.bluetooth.requestDevice({\n      filters: [{\n        services: ['battery_service']\n      }]\n    })\n    .then(function (device) {\n      return device.gatt.connect();\n    })\n    .then(function (server) {\n      return server.getPrimaryService('battery_service');\n    })\n    .then(function (service) {\n      return service.getCharacteristic('battery_level');\n    })\n    .then(function (characteristic) {\n      return characteristic.readValue();\n    })\n    .then(function (value) {\n      $target.innerHTML = 'Battery percentage is <b>' + value.getUint8(0) + '</b>.';\n    })\n    .catch(function (error) {\n      $target.innerText = error;\n    });\n}"},links:[{url:"https://webbluetoothcg.github.io/web-bluetooth/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web",title:"Interact with BLE devices on the Web"}]}),new i({id:"nfc",name:"NFC",description:["The <b>Web NFC API</b> is a low-level API that provides sites the ability to read and write to nearby NFC (Near-Field Communication) devices.","It allows starting up a scan that informs when an NFC tag has been tapped. It also provides a method to write a message via NFC.",'Current support is limited to an experimental implementation in Chrome, available behind the "experimental-web-platform-features" flag on Android. There was also Firefox OS experimental implementation that is <code>moz</code>-prefixed and doesn\'t follow the current state of the specification draft.'],api:"<dl>\n        <dt><code>const ndef = new NDEFReader()</code></dt>\n        <dd>Creates an object used for interacting with NDEF formatted NFC tags.</dd>\n        <dt><code>ndef.scan(options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved if starting NFC scan was successful.</dd>\n        <dt><code>ndef.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when a new reading is available.</dd>\n        <dt><code>ndef.addEventListener('readingerror', listener)</code></dt>\n        <dd>An event fired when an error happened during reading.</dd>\n        <dt><code>ndef.write(message, options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved if writing the <code>message</code> (String, ArrayBuffer or NDEF record) with <code>options</code> was successful.</dd>\n      </dl>",tests:[i.windowContains("NDEFReader")],demo:{html:'<p>\n  <button onclick="readTag()">Test NFC Read</button>\n  <button onclick="writeTag()">Test NFC Write</button>\n</p>\n<pre id="log"></pre>\n<p><small>Based on the code snippets from <a href="https://w3c.github.io/web-nfc/#examples">specification draft</a>.</small></p>',js:'async function readTag() {\n  if ("NDEFReader" in window) {\n    const ndef = new NDEFReader();\n    try {\n      await ndef.scan();\n      ndef.onreading = event => {\n        const decoder = new TextDecoder();\n        for (const record of event.message.records) {\n          consoleLog("Record type:  " + record.recordType);\n          consoleLog("MIME type:    " + record.mediaType);\n          consoleLog("=== data ===\\n" + decoder.decode(record.data));\n        }\n      }\n    } catch(error) {\n      consoleLog(error);\n    }\n  } else {\n    consoleLog("Web NFC is not supported.");\n  }\n}\n\nasync function writeTag() {\n  if ("NDEFReader" in window) {\n    const ndef = new NDEFReader();\n    try {\n      await ndef.write("What Web Can Do Today");\n      consoleLog("NDEF message written!");\n    } catch(error) {\n      consoleLog(error);\n    }\n  } else {\n    consoleLog("Web NFC is not supported.");\n  }\n}\n\nfunction consoleLog(data) {\n  var logElement = document.getElementById(\'log\');\n  logElement.innerHTML += data + \'\\n\';\n};'},caniuse:"webnfc",links:[{url:"https://w3c.github.io/web-nfc/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/NFC_API/Using_the_NFC_API",title:"MDN: Using the NFC API (covers outdated spec revision)"}]}),new i({id:"proximity",name:"Proximity Sensors",description:["The <b>Proximity Events API</b> allows Web applications to get the access to the data from the device's proximity sensors, detecting whether there is a physical object near the device.","The first approach to supporting proximity sensor on the Web - as a standalone API - was implemented in Firefox. Since then the specification was rewritten to make use of the new <b>Generic Sensors API</b>, but no vendor implemented that spec as of early 2020."],api:"<p><b>The old, standalone API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('deviceproximity', listener)</code></dt>\n        <dd>An event fired when the device has sensed the physical object proximity, containing approximate distance information.</dd>\n        <dt><code>window.addEventListener('userproximity', listener)</code></dt>\n        <dd>An event fired when the device has roughly sensed the physical object proximity, containing boolean <code>near</code> flag only.</dd>\n      </dl>\n      <p><b>The new, generic API</b></p>\n      <dl>\n        <dt><code>sensor = new ProximitySensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the proximity sensor readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the physical object proximity reading has changed, indicating that the sensor object contains updated approximate distance information in cm (<code>sensor.distance</code>) and boolean <code>sensor.near</code> flag.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",caniuse:"proximity",tests:[i.windowContains("ondeviceproximity"),i.windowContains("onuserproximity"),i.windowContains("ProximitySensor")],demo:{html:'<p>Current approximate distance to object is <b id="deviceValue">unknown</b>.</p>\n<p>Currently, the object is <b id="nearValue">in unknown proximity</b>.</p>\n\n<div id="box"></div>',cssHidden:"#box {\n  width: 100px;\n  height: 100px;\n  border: 1px solid #000;\n  margin-left: 10px;\n  background-color: gray;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}",js:"var box = document.getElementById('box');\n\nfunction onDeviceProximityChanged(event) {\n  document.getElementById('deviceValue').innerHTML = event.value + ' cm (' + event.min + '-' + event.max + ' cm range)';\n  \n  var size = Math.min(200, Math.max(20, 500 / (event.value || 1)));\n  \n  box.style.width = size + 'px';\n  box.style.height = size + 'px';\n}\n\nfunction onUserProximityChanged(event) {\n  document.getElementById('nearValue').innerHTML = event.near ? 'near' : 'rather far';\n  box.style.backgroundColor = event.near ? 'red' : 'green';\n}\n\nwindow.addEventListener('deviceproximity', onDeviceProximityChanged);\nwindow.addEventListener('userproximity', onUserProximityChanged);",jsOnExit:"window.removeEventListener('deviceproximity', onDeviceProximityChanged);\nwindow.removeEventListener('userproximity', onUserProximityChanged);"},links:[{url:"https://w3c.github.io/proximity/",title:"Proximity API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"http://www.sitepoint.com/introducing-proximity-api/",title:"SitePoint: Introducing the Proximity API"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events",title:"MDN: Proximity Events"}]}),new i({id:"ambient-light",name:"Ambient Light",description:["The <b>Ambient Light API</b> allows Web applications to access the light intensity level measured by the device's light sensor, normally built-in with the device's camera.",'The first approach to supporting light intensity sensor on the Web - as a standalone API - was implemented in Firefox back in 2013. Since then the specification was rewritten to make use of the new <b>Generic Sensors API</b>. This flavor, as of early 2020, is only experimentally implemented in Google Chrome, behind the "Generic Sensor Extra Classes" flag.'],api:"<p><b>The old, standalone API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('devicelight', listener)</code></dt>\n        <dd>An event fired when the device's light sensor measured value has changed, containing the light intensity expressed in lux.</dd>\n      </dl>\n      <p><b>The new, generic API</b></p>\n      <dl>\n        <dt><code>sensor = new AmbientLightSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the light intensity sensor readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the light intensity reading has changed, indicating that the sensor object contains updated light intensity expressed in lux, in <code>sensor.illuminance</code> property.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",caniuse:"ambient-light",tests:[i.windowContains("ondevicelight"),i.windowContains("AmbientLightSensor")],demo:{html:'<p>Current light intensity is <b id="value">unknown</b>.</p>\n\n<div id="box"></div>',cssHidden:"#box {\n  width: 100px;\n  height: 100px;\n  border: 1px solid #000;\n  margin-left: 10px;\n}",js:'function update(illuminance) {\n  document.getElementById("value").innerHTML = illuminance + " lux";\n\n  var colorPart = Math.min(255, illuminance).toFixed(0);\n  document.getElementById("box").style.backgroundColor =\n    "rgb(" + colorPart + ", " + colorPart + ", " + colorPart + ")";\n}\n\nif ("AmbientLightSensor" in window) {\n  try {\n    var sensor = new AmbientLightSensor();\n    sensor.addEventListener("reading", function (event) {\n      update(sensor.illuminance);\n    });\n    sensor.start();\n  } catch (e) {\n    console.error(e);\n  }\n}\nif ("ondevicelight" in window) {\n  function onUpdateDeviceLight(event) {\n    update(event.value);\n  }\n  \n  window.addEventListener("devicelight", onUpdateDeviceLight);\n}',jsOnExit:"if (onUpdateDeviceLight) window.removeEventListener('devicelight', onUpdateDeviceLight);"},links:[{url:"https://w3c.github.io/ambient-light/",title:"Ambient Light API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"https://deanhume.com/ambient-light-sensor/",title:"Getting started with the Ambient Light Sensor"}]}),new i({id:"camera-microphone",name:"Audio & Video Capture",description:['The <b>Media Capture API</b> allows authorized Web applications to access the streams from the device\'s audio and video capturing\n        interfaces, i.e. to use the data available from the camera and the microphone. The streams exposed by the API can be bound directly to the HTML\n        <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> elements or read and manipulated in the code, including further more specific processing via <a href="/photos.html">Image Capture API</a>, <a href="/recording.html">Media Recorder API</a> or <a href="/realtime.html">Real-Time Communication</a>.','There is also a higher level alternative <a href="http://www.wufoo.com/html5/attributes/20-accept.html">built-in into mobile operating systems</a>\n        like iOS and Android that doesn\'t require any JavaScript API - the basic HTML <code>&lt;input type="file" accept="image/*"&gt;</code> element allows\n        launching any application that provides an image file, including camera.'],api:"<dl>\n        <dt><code>navigator.mediaDevices.getUserMedia(constraints)</code></dt>\n        <dd>Prompts user for an access to the media interface specified by the <code>constraints</code>\n          and returns a <code>Promise</code> that is resolved with the interface's stream handler.</dd>\n        <dt><code>stream.getAudioTracks()</code></dt>\n        <dd>Returns a collection of audio tracks objects being provided by the device's microphone.</dd>\n        <dt><code>stream.getVideoTracks()</code></dt>\n        <dd>Returns a collection of video tracks objects being provided by the device's camera.</dd>\n        <dt><code>mediaElement.srcObject = stream</code></dt>\n        <dd>Sets a stream to be rendered into the provided <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> DOM element.</dd>\n      </dl>\n      <p>Previous version of the standard, supported with vendor prefixes, contained the callback-based <code>getUserMedia</code> method directly within\n      the <code>navigator</code> element:</p>\n      <pre><code>navigator.webkitGetUserMedia(constraints, successCallback, errorCallback)</code></pre>",caniuse:"stream",tests:[i.navigatorContains("mediaDevices"),i.navigatorContains("getUserMedia")],demo:{html:'<div class="columns">\n  <div class="column">\n    <p><button type="button" onclick="getStream(\'video\')">Grab video</button></p>\n    \n    <video controls autoplay style="height:180px; width: 240px;"></video>\n  </div>\n  <div class="column">\n    <p><button type="button" onclick="getStream(\'audio\')">Grab audio</button></p>\n    \n    <audio controls></audio>\n  </div>\n</div>',js:"function getUserMedia(constraints) {\n  // if Promise-based API is available, use it\n  if (navigator.mediaDevices) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n    \n  // otherwise try falling back to old, possibly prefixed API...\n  var legacyApi = navigator.getUserMedia || navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia || navigator.msGetUserMedia;\n    \n  if (legacyApi) {\n    // ...and promisify it\n    return new Promise(function (resolve, reject) {\n      legacyApi.bind(navigator)(constraints, resolve, reject);\n    });\n  }\n}\n\nfunction getStream (type) {\n  if (!navigator.mediaDevices && !navigator.getUserMedia && !navigator.webkitGetUserMedia &&\n    !navigator.mozGetUserMedia && !navigator.msGetUserMedia) {\n    alert('User Media API not supported.');\n    return;\n  }\n\n  var constraints = {};\n  constraints[type] = true;\n  \n  getUserMedia(constraints)\n    .then(function (stream) {\n      var mediaControl = document.querySelector(type);\n      \n      if ('srcObject' in mediaControl) {\n        mediaControl.srcObject = stream;\n      } else if (navigator.mozGetUserMedia) {\n        mediaControl.mozSrcObject = stream;\n      } else {\n        mediaControl.src = (window.URL || window.webkitURL).createObjectURL(stream);\n      }\n      \n      mediaControl.play();\n    })\n    .catch(function (err) {\n      alert('Error: ' + err);\n    });\n}"},links:[{url:"https://w3c.github.io/mediacapture-main/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/getusermedia/intro/",title:"HTML5 Rocks: Capturing Audio & Video in HTML5"},{url:"http://blogs.windows.com/msedgedev/2015/05/13/announcing-media-capture-functionality-in-microsoft-edge/",title:"Announcing media capture functionality in Microsoft Edge"},{url:"https://dev.opera.com/blog/webcam-orientation-preview/",title:"Native Webcam Support and Orientation Events — Technology Preview from Opera"},{url:"http://www.sitepoint.com/face-proximity-detection-with-javascript/",title:"SitePoint: Face Proximity Detection with JavaScript"}]}),new i({id:"network-type-speed",name:"Network Type & Speed",description:["The <b>Network Information API</b> allows Web applications to read the current network type and the maximum downlink speed that are assumed\n        based on the underlying connection technology used by the client. It also allows to subscribe for a notification when the network type has changed.","The newest addition (mid-2017), implemented by Chrome on Android as of September 2017, also provides an effective network type information that in turn\n        is calculated using the actual network performance metrics collected by the browser, allowing the Web applications to adjust to the quality of the connection."],api:"<dl>\n        <dt><code>navigator.connection.type</code></dt>\n        <dd>Returns the theoretical type of the current connection, based on the underlying connection technology, i.e. <code>cellular</code>, <code>wifi</code>, <code>none</code> etc.</dd>\n        <dt><code>navigator.connection.effectiveType</code></dt>\n        <dd>Returns the information about the quality of the current connection based on recently observed performance metrics, regardless of the underlying connection technology, i.e. <code>slow-2g</code>, <code>2g</code>, <code>3g</code>, <code>4g</code>.</dd>\n        <dt><code>navigator.connection.downlinkMax</code></dt>\n        <dd>Returns the theoretical maxinum downlink speed, in Mbps, for the underlying technology of the current connection.</dd>\n        <dt><code>navigator.connection.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the connection type has changed.</dd>\n      </dl>",tests:[i.navigatorContains("connection")],caniuse:"netinfo",demo:{html:'<p>Current theoretical network type is <b id="networkType">not available</b>.</p>\n<p>Current effective network type is <b id="effectiveNetworkType">not available</b>.</p>\n<p>Current max downlink speed is <b id="downlinkMax">not available</b>.',js:"function getConnection() {\n  return navigator.connection || navigator.mozConnection ||\n    navigator.webkitConnection || navigator.msConnection;\n}\n\nfunction updateNetworkInfo(info) {\n  document.getElementById('networkType').innerHTML = info.type;\n  document.getElementById('effectiveNetworkType').innerHTML = info.effectiveType;\n  document.getElementById('downlinkMax').innerHTML = info.downlinkMax;\n}\n\nvar info = getConnection();\nif (info) {\n  info.onchange = function (event) {\n    updateNetworkInfo(event.target);\n  }\n  updateNetworkInfo(info);\n}",jsOnExit:"if (info) info.onchange = null;"},links:[{url:"https://wicg.github.io/netinfo/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API",title:"MDN: Network Information API"},{url:"https://mxb.at/blog/connection-aware-components/",title:"Connection-Aware Components"}]}),new i({id:"online-state",name:"Online State",description:"Browsers expose a network connection availability information to the Web application, so that the applications may react properly, i.e.\n        stop all the operations utilising the network and switch to cached data when offline condition was detected.",api:"<dl>\n        <dt><code>navigator.onLine</code></dt>\n        <dd>Returns <code>true</code> when the browser detects network connection available, <code>false</code> otherwise.</dd>\n        <dt><code>window.addEventListener('online', listener)</code></dt>\n        <dd>An event fired when the browser detects network connection has become available.</dd>\n        <dt><code>window.addEventListener('offline', listener)</code></dt>\n        <dd>An event fired when the browser detects network connection has become unavailable.</dd>\n      </dl>",caniuse:"online-status",tests:[i.navigatorContains("onLine")],demo:{html:'<p>Turn the network connection on/off to see the changes.</p>\n\n<p>Initial connection state was <b id="status">unknown</b>.</p>\n\n<div id="target"></div>',js:"document.getElementById('status').innerHTML = navigator.onLine ? 'online' : 'offline';\n\nvar target = document.getElementById('target');\n\nfunction handleStateChange() {\n  var timeBadge = new Date().toTimeString().split(' ')[0];\n  var newState = document.createElement('p');\n  var state = navigator.onLine ? 'online' : 'offline';\n  newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> Connection state changed to <b>' + state + '</b>.';\n  target.appendChild(newState);\n}\n\nwindow.addEventListener('online', handleStateChange);\nwindow.addEventListener('offline', handleStateChange);",jsOnExit:"window.removeEventListener('online', handleStateChange);\nwindow.removeEventListener('offline', handleStateChange);"},links:[{url:"https://html.spec.whatwg.org/multipage/browsers.html#browser-state",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine#Specification",title:"MDN description"}]}),new i({id:"vibration",name:"Vibration",description:"The <b>Vibration API</b> allows Web applications to use the device's built-in vibration, if one is present.",api:"<dl>\n        <dt><code>navigator.vibrate(durationOrPattern)</code></dt>\n        <dd>Vibrate the device once for the duration given or according to durations pattern given.</dd>\n      </dl>",caniuse:"vibration",tests:[i.navigatorContains("vibrate")],demo:{html:'<button onclick="vibrateSimple()">Vibrate for 200 ms</button>\n<button onclick="vibratePattern()">Vibrate with pattern</button>',js:"function vibrateSimple() {\n  navigator.vibrate(200);\n}\n\nfunction vibratePattern() {\n  navigator.vibrate([100, 200, 200, 200, 500]);\n}"},links:[{url:"http://dev.w3.org/2009/dap/vibration/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API",title:"MDN: Vibration API"},{url:"http://illyism.com/journal/vibrate-mobile-phone-web-vibration-api",title:"Learn how to vibrate your mobile phone on the Web using the vibration API"}]}),new i({id:"battery-status",name:"Battery Status",description:"The <b>Battery Status API</b> allows Web applications to get the information about the device's power source, battery charge level,\n        expected time of charging or discharging. It also exposes events whenever any of the information available changes. The API allows the applications\n        to turn on/off its energy inefficient operations according to the power levels.",api:"<dl>\n        <dt><code>navigator.getBattery()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object containing battery information.</dd>\n        <dt><code>battery.charging</code></dt>\n        <dd>Returns <code>true</code> if the device is currently being charged.</dd>\n        <dt><code>battery.chargingTime</code></dt>\n        <dd>Returns the number of seconds remaining until the battery is fully charged.</dd>\n        <dt><code>battery.dischargingTime</code></dt>\n        <dd>Returns the number of seconds remaining until the battery is fully discharged.</dd>\n        <dt><code>battery.level</code></dt>\n        <dd>Returns the battery charging level as the number in 0 to 1 range.</dd>\n        <dt><code>battery.addEventListener('chargingchange', listener)</code></dt>\n        <dd>An event fired when <code>battery.charging</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('chargingtimechange', listener)</code></dt>\n        <dd>An event fired when <code>battery.chargingTime</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('dischargingtimechange', listener)</code></dt>\n        <dd>An event fired when <code>battery.dischargingTime</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('levelchange', listener)</code></dt>\n        <dd>An event fired when <code>battery.level</code> value has changed.</dd>\n      </dl>",caniuse:"battery-status",tests:[i.navigatorContains("getBattery"),i.navigatorContains("battery")],demo:{html:'<p>Initial battery status was <b id="charging">unknown</b>, charging time <b id="chargingTime">unknown</b>, discharging time <b id="dischargingTime">unknown</b>, level <b id="level">unknown</b>.</p>\n\n<div id="target"></div>',js:"if ('getBattery' in navigator || ('battery' in navigator && 'Promise' in window)) {\n  var target = document.getElementById('target');\n\n  function handleChange(change) {\n    var timeBadge = new Date().toTimeString().split(' ')[0];\n    var newState = document.createElement('p');\n    newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + change + '.';\n    target.appendChild(newState);\n  }\n  \n  function onChargingChange() {\n    handleChange('Battery charging changed to <b>' + (this.charging ? 'charging' : 'discharging') + '</b>')\n  }\n  function onChargingTimeChange() {\n    handleChange('Battery charging time changed to <b>' + this.chargingTime + ' s</b>');\n  }\n  function onDischargingTimeChange() {\n    handleChange('Battery discharging time changed to <b>' + this.dischargingTime + ' s</b>');\n  }\n  function onLevelChange() {\n    handleChange('Battery level changed to <b>' + this.level + '</b>');\n  }\n\n  var batteryPromise;\n  \n  if ('getBattery' in navigator) {\n    batteryPromise = navigator.getBattery();\n  } else {\n    batteryPromise = Promise.resolve(navigator.battery);\n  }\n  \n  batteryPromise.then(function (battery) {\n    document.getElementById('charging').innerHTML = battery.charging ? 'charging' : 'discharging';\n    document.getElementById('chargingTime').innerHTML = battery.chargingTime + ' s';\n    document.getElementById('dischargingTime').innerHTML = battery.dischargingTime + ' s';\n    document.getElementById('level').innerHTML = battery.level;\n    \n    battery.addEventListener('chargingchange', onChargingChange);\n    battery.addEventListener('chargingtimechange', onChargingTimeChange);\n    battery.addEventListener('dischargingtimechange', onDischargingTimeChange);\n    battery.addEventListener('levelchange', onLevelChange);\n  });\n}",jsOnExit:"if ('getBattery' in navigator || ('battery' in navigator && 'Promise' in window)) {\n  var batteryPromise;\n  \n  if ('getBattery' in navigator) {\n    batteryPromise = navigator.getBattery();\n  } else {\n    batteryPromise = Promise.resolve(navigator.battery);\n  }\n  \n  batteryPromise.then(function (battery) {\n    battery.removeEventListener('chargingchange', onChargingChange);\n    battery.removeEventListener('chargingtimechange', onChargingTimeChange);\n    battery.removeEventListener('dischargingtimechange', onDischargingTimeChange);\n    battery.removeEventListener('levelchange', onLevelChange);\n  });\n}"},links:[{url:"https://w3c.github.io/battery/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API",title:"MDN: Battery Status API"}]}),new i({id:"storage",name:"Offline Storage",description:['There were <a href="http://diveinto.html5doctor.com/storage.html" target="_blank" rel="noopener">several iterations</a> of prototypes\n          and standardized technologies for offline storage capabilities for Web applications. First attempts were either just hacky workarounds\n          (like to store data in cookies) or required additional software (like Flash or Google Gears). Later, Web SQL idea, basically to include SQLite\n          natively within a browser, was coined and <a href="http://caniuse.com/#feat=sql-storage" target="_blank" rel="noopener">implemented throughout some browsers</a>,\n          but deprecated later <a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/" target="_blank" rel="noopener">due to\n          the standardization difficulties</a>.','Right now there are at least three distinct and independent technologies standardized and available. The simplest one is <b>Web Storage</b> - \n          a key-value string storage, allowing Web applications to store data either persistently and cross-window (<code>localStorage</code>) \n          or for a single session in a single browser tab (<code>sessionStorage</code>). The more sophisticated <b>IndexedDB</b> is a low-level API\n          over database-like structures with transactions and cursors iterating by indexes. The newest addition - <b>Cache API</b> is a specialized\n          solution to keep <code>Request</code>/<code>Response</code> pairs, useful mostly within <a href="/offline.html">Service Worker</a> implementation.','Live example and usage data shown here are referring to <b>Web Storage</b> engine. For details on IndexedDB,\n          refer to <a href="http://caniuse.com/#feat=indexeddb" target="_blank" rel="noopener">caniuse.com</a>.',"The actual persistence of data stored in any of the persistent stores (be it <code>localStorage</code>, IndexedDB or Cache API) is browser-managed\n          and by default might be wiped out without end-user consent in case of memory pressure conditions. To address this problem, <b>Storage API</b>\n          was introduced - it gives the Web applications a method to store the data in a fully reliable way if the user permits it to do so. Chrome's\n          implementation grants this permission based on user-engagement-based heuristic, while Firefox asks for the permission explicitly."],api:'<p><b>Web Storage API</b></p>\n      <dl>\n        <dt><code>window.sessionStorage</code></dt>\n        <dd>Gives an access to the Web Storage engine with per-session objects lifetime.</dd>\n        <dt><code>window.localStorage</code></dt>\n        <dd>Gives an access to the Web Storage engine with persistent objects lifetime.</dd>\n        <dt><code>storage.setItem(key, value)</code></dt>\n        <dd>Saves the <code>value</code> string under the <code>key</code> in the selected storage engine.</dd>\n        <dt><code>storage.getItem(key)</code></dt>\n        <dd>Returns the string value stored under the <code>key</code> in the selected storage engine.</dd>\n        <dt><code>storage.removeItem(key)</code></dt>\n        <dd>Removes the string value stored under the <code>key</code> from the selected storage engine.</dd>\n        <dt><code>storage.clear()</code></dt>\n        <dd>Removes all the string values stored in the selected storage engine.</dd>\n        <dt><code>window.addEventListener(\'storage\', listener)</code></dt>\n        <dd>An event fired when the data stored in either <code>sessionStorage</code> or <code>localStorage</code> has been changed externally.</dd>\n      </dl>\n      <p><b>IndexedDB</b></p>\n      <dl>\n        <dt><code>let openRequest = window.indexedDB.open(name, version)</code></dt>\n        <dd>Triggers opening a database connection to either existing or newly-created database. \n          Returns an object that fires <code>success</code> event when the connection is established.</dd>\n        <dt><code>let db = openRequest.result</code></dt>\n        <dd>Gives an access to the open database connection instance - available after <code>success</code> was fired.</dd>\n        <dt><code>db.createObjectStore(storeName, options)</code></dt>\n        <dd>Creates a named container (object store) for objects in the opened database.</dd>\n        <dt><code>let tx = db.transaction(storeName)</code></dt>\n        <dd>Opens a data-reading or data-manipulation transaction scoped to the given object store(s).</dd>\n        <dt><code>tx.objectStore.put(value, key)</code></dt>\n        <dd>Saves the <code>value</code> in the currently opened object store.</dd>\n        <dt><code>tx.objectStore.get(key)</code></dt>\n        <dd>Gets the object stored under a <code>key</code> in the currently opened object store.</dd>\n        <dt><code>tx.createIndex(name, keyPath, options)</code></dt>\n        <dd>Creates an index that allows to seek for the stored objects using the property specified via <code>keyPath</code>.</dd>\n        <dt><code>tx.index(name).get(key)</code></dt>\n        <dd>Gets the object having the particular index <code>keyPath</code> equal to the <code>key</code> specified.</dd>\n      </dl>\n      <p><b>Cache API</b></p>\n      <dl>\n        <dt><code>let cache = window.caches.open(key)</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves to a store "bucket" object giving an access to the cached <code>Response</code> objects.</dd>\n        <dt><code>cache.put(request, response)</code></dt>\n        <dd>Saves the <code>Response</code> object to the cache with its corresponding <code>Request</code> object.</dd>\n        <dt><code>cache.match(request, option)</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves to the <code>Response</code> object matching the specified <code>Request</code> \n          (with the <code>options</code>-controlled level of exactness) found in the opened cache "bucket".</dd>\n        <dt><code>cache.delete(request, option)</code></dt>\n        <dd>Removes the <code>Response</code> object matching the specified <code>Request</code>\n          (with the <code>options</code>-controlled level of exactness) found in the opened cache "bucket".</dd>\n      </dl>\n      <p><b>Storage API (persistence permission)</b></p>\n      <dl>\n        <dt><code>navigator.storage.persist()</code></dt>\n        <dd>Requests a permission to turn the data saved by the Web application into persistent data. \n          Returns a <code>Promise</code> that resolves with a boolean value indicating whether the permission was granted.</dd>\n        <dt><code>navigator.storage.persisted()</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves with a boolean value indicating whether the persistent storage permission was already granted.</dd>\n      </dl>',caniuse:"namevalue-storage",tests:[i.windowContains("sessionStorage"),i.windowContains("localStorage"),i.windowContains("indexedDB"),i.windowContains("caches"),i.navigatorContains("storage")],demo:{html:'<p>\n  <label>Engine</label>\n</p>\n<div role="group" id="selectEngine">\n  <input type="radio" name="engine" value="localStorage" checked/> Persistent Storage\n  <input type="radio" name="engine" value="sessionStorage"/> Per-Session Storage\n</div>\n\n<p>\n  <label for="value">Value for <code>myKey</code></label>\n  <input type="text" id="value">\n</p>\n\n<p>Open the example in another tab and change the value there to see the synchronization via <code>storage</code> event.</p>\n<div id="target"></div>',js:"if ('localStorage' in window || 'sessionStorage' in window) {\n  var selectedEngine;\n\n  var logTarget = document.getElementById('target');\n  var valueInput = document.getElementById('value');\n\n  var reloadInputValue = function () {\n  console.log(selectedEngine, window[selectedEngine].getItem('myKey'))\n    valueInput.value = window[selectedEngine].getItem('myKey') || '';\n  }\n  \n  var selectEngine = function (engine) {\n    selectedEngine = engine;\n    reloadInputValue();\n  };\n\n  function handleChange(change) {\n    var timeBadge = new Date().toTimeString().split(' ')[0];\n    var newState = document.createElement('p');\n    newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + change + '.';\n    logTarget.appendChild(newState);\n  }\n\n  var radios = document.querySelectorAll('#selectEngine input');\n  for (var i = 0; i < radios.length; ++i) {\n    radios[i].addEventListener('change', function () {\n      selectEngine(this.value)\n    });\n  }\n  \n  selectEngine('localStorage');\n\n  valueInput.addEventListener('keyup', function () {\n    window[selectedEngine].setItem('myKey', this.value);\n  });\n\n  var onStorageChanged = function (change) {\n    var engine = change.storageArea === window.localStorage ? 'localStorage' : 'sessionStorage';\n    handleChange('External change in <b>' + engine + '</b>: key <b>' + change.key + '</b> changed from <b>' + change.oldValue + '</b> to <b>' + change.newValue + '</b>');\n    if (engine === selectedEngine) {\n      reloadInputValue();\n    }\n  }\n\n  window.addEventListener('storage', onStorageChanged);\n}",jsOnExit:"window.removeEventListener('storage', onStorageChanged);"},links:[{url:"https://html.spec.whatwg.org/multipage/webstorage.html",title:"Web Storage Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",title:"MDN: Web Storage API"},{url:"https://www.w3.org/TR/IndexedDB/",title:"IndexedDB Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",title:"MDN: IndexedDB API"},{url:"https://w3c.github.io/ServiceWorker/v1/#cache",title:"Cache API Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Cache",title:"MDN: Cache API"},{url:"https://storage.spec.whatwg.org/",title:"Storage API Specification"},{url:"https://developers.google.com/web/updates/2016/06/persistent-storage",title:"Google Developers: Persistent Storage"}]}),new i({id:"files",name:"File Access",description:["The <b>File API</b> gives Web applications an access to the filesystem-level read-only information about the files that the user decides to share\n        with the application, i.e. size, MIME type, modification date, content, without sending the file to the server.",'The <b>Native File System API</b>, available in Google Chrome via <a href="https://developers.chrome.com/origintrials/#/view_trial/3868592079911256065" target="_blank" rel="noopener">origin trial</a> in Spring 2020,\n      aims to make it also possible to write into the file system to the handle chosen in the system-level file opening dialog by the user. The API is in its design phase, breaking changes are still expected.'],api:"<p><b>File API</b></p>\n    <dl>\n      <dt><code>fileInputElement.files</code></dt>\n      <dd>Returns a collection of file objects that were selected by the user using <code>&lt;input type=\"file\"&gt;</code>DOM element.</dd>\n      <dt><code>file.name</code></dt>\n      <dd>Returns the original name of the file, without the path.</dd>\n      <dt><code>file.size</code></dt>\n      <dd>Returns the file size in bytes.</dd>\n      <dt><code>file.type</code></dt>\n      <dd>Returns the file's MIME type.</dd>\n      <dt><code>file.lastModifiedDate</code></dt>\n      <dd>Returns the file's last modification date.</dd>\n      \n      <dt><code>const fileReader = new FileReader()</code></dt>\n      <dd>Creates an instance of a class responsible for reading the <code>file</code> content.</dd>\n      <dt><code>fileReader.readAsText(file)</code></dt>\n      <dd>Initiates a process of reading the file and encoding its content as text.</dd>\n      <dt><code>fileReader.addEventListener('load', listener)</code></dt>\n      <dd>An event fired when the reading operation has completed successfully. The data read is available via <code>fileReader.result</code> property.</dd>\n      \n      <dt><code>file.text()</code></dt>\n      <dd>Modern alternative for reading the file and encoding its content as text. Returns a <code>Promise</code> resolved with <code>file</code> content string.</dd>\n      <dt><code>file.arrayBuffer()</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with <code>file</code> content represented as <code>ArrayBuffer</code> instance.</dd>\n    </dl>\n\n    <p><b>Native File System API (experimental)</b></p>\n    <dl>\n      <dt><code>const handle = await window.chooseFileSystemEntries(options)</code></dt>\n      <dd>Invokes the system-level file picker dialog for <code>options</code> given (i.e. for saving new file or picking files of specific type).\n        Returns a <code>Promise</code> resolved with chosen file handle.</dd>\n      <dt><code>const file = await handle.getFile()</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with chosen handle's <code>File</code> object, as in File API above.</dd>\n      <dt><code>const writer = handle.createWriter()</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with handle's writer object, allowing to write data to the file.</dd>\n      <dt><code>writer.write(start, content)</code></dt>\n      <dd>Writes <code>content</code> to the stream.</dd>\n      <dt><code>writer.close()</code></dt>\n      <dd>Flushes the stream to the file system and closing it. Returns a <code>Promise</code> resolved when the stream has been closed.</dd>\n    </dl>",caniuse:"fileapi",tests:[i.windowContains("File"),i.windowContains("chooseFileSystemEntries")],demo:{html:'<div class="columns">\n  <div class="column">\n    <button class="btn-file">\n      Choose some files to read<br>(File API) <input type="file" onchange="readFiles(this.files)" multiple>\n    </button>\n    \n    <p>Number of selected files: <b id="count">N/A</b></p>\n  </div>\n  <div class="column">\n    <button class="btn-file" onclick="writeFile()">\n      Choose file to create or overwrite<br>(Native File System API)\n    </button>\n  </div>\n</div>\n\n<ul id="target"></ul>',css:".btn-file {\n    position: relative;\n    overflow: hidden;\n    margin: 10px;\n}\n.btn-file input[type=file] {\n    position: absolute;\n    top: 0;\n    right: 0;\n    min-width: 100%;\n    min-height: 100%;\n    opacity: 0;\n    outline: none;\n    background: #fff;\n    cursor: inherit;\n    display: block;\n}",js:"function getReadFile(reader, i) {\n  return function () {\n    var li = document.querySelector('[data-idx=\"' + i + '\"]');\n\n    li.innerHTML += 'File starts with \"' + reader.result.substr(0, 25) + '\"';\n  }\n}\n\nfunction readFiles(files) {\n  document.getElementById('count').innerHTML = files.length;\n\n  var target = document.getElementById('target');\n  target.innerHTML = '';\n\n  for (var i = 0; i < files.length; ++i) {\n    var item = document.createElement('li');\n    item.setAttribute('data-idx', i);\n    var file = files[i];\n\n    var reader = new FileReader();\n    reader.addEventListener('load', getReadFile(reader, i));\n    reader.readAsText(file);\n\n    item.innerHTML = '<b>' + file.name + '</b>, ' + file.type + ', ' + file.size + ' bytes, last modified ' + file.lastModifiedDate + '<br>';\n    target.appendChild(item);\n  };\n}\n\nasync function writeFile() {\n  if (!window.chooseFileSystemEntries) {\n    alert('Native File System API not supported');\n    return;\n  }\n  \n  const target = document.getElementById('target');\n  target.innerHTML = 'Opening file handle...';\n  \n  const handle = await window.chooseFileSystemEntries({\n    type: 'save-file',\n  });\n  \n  const file = await handle.getFile()\n  const writer = await handle.createWriter();\n  await writer.write(0, 'Hello world from What Web Can Do!');\n  await writer.close()\n  \n  target.innerHTML = 'Test content written to <b>' + file.name + '</b>.';\n}"},links:[{url:"https://w3c.github.io/FileAPI/",title:"Specification Draft"},{url:"https://web.dev/native-file-system/",title:"The Native File System API: Simplifying access to local files"},{url:"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications",title:"MDN: Using files from Web applications"},{url:"http://www.html5rocks.com/en/tutorials/file/dndfiles/",title:"Reading files in JavaScript using the File APIs"}]}),new i({id:"permissions",name:"Permissions",description:"The <b>Permissions API</b> provides the uniform way for Web applications to query for the permission status for the features\n        that might require user consent, like notifications or geolocation. With Permissions API the app can list the permissions\n        granted by the user without actually triggering the feature itself.",api:"<dl>\n        <dt><code>navigator.permissions.query({name: feature})</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object representing the permission status of the requested feature.</dd>\n        <dt><code>permissionStatus.state</code></dt>\n        <dd>Returns the permission status of the requested feature, either <code>granted</code>, <code>denied</code> or - in case the user was not yet asked - <code>prompt</code>.</dd>\n        <dt><code>permissionStatus.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the permission status of the requested feature has changed.</dd>\n      </dl>",caniuse:"permissions-api",tests:[i.navigatorContains("permissions")],demo:{html:'<div>\n  <p>\n    <b><a href="/geolocation.html">Geolocation</a></b> permission status is <b id="geolocation-status">unknown</b>.\n    \n    <button onclick="requestGeolocation()">Request</button>\n  </p>\n  <p>\n    <b><a href="/local-notifications.html">Notifications</a></b> permission status is <b id="notifications-status">unknown</b>.\n    \n    <button onclick="requestNotifications()">Request</button>\n  </p>\n  <p>\n    <b><a href="/push-notifications.html">Push</a></b> permission status is <b id="push-status">unknown</b>.\n    \n    <button onclick="requestPush()">Request</button>\n  </p>\n  <p>\n    <b>Midi</b> permission status is <b id="midi-status">unknown</b>.\n    \n    <button onclick="requestMidi()">Request</button>\n  </p>\n  <p>\n    <b><a href="/camera-microphone.html">Camera</a></b> permission status is <b id="camera-status">unknown</b>.\n    \n    <button onclick="requestCamera()">Request</button>\n  </p>\n  <p>\n    <b><a href="/camera-microphone.html">Microphone</a></b> permission status is <b id="microphone-status">unknown</b>.\n    \n    <button onclick="requestMicrophone()">Request</button>\n  </p>\n  <p>\n    <b><a href="/background-sync.html">Background Sync</a></b> permission status is <b id="background-sync-status">unknown</b>.\n  </p>\n  <p>\n    <b><a href="/ambient-light.html">Ambient Light Sensor</a></b> permission status is <b id="ambient-light-sensor-status">unknown</b>.\n  </p>\n  <p>\n    <b><a href="/device-motion.html">Accelerometer</a></b> permission status is <b id="accelerometer-status">unknown</b>.\n  </p>\n  <p>\n    <b><a href="/device-motion.html">Gyroscope</a></b> permission status is <b id="gyroscope-status">unknown</b>.\n  </p>\n  <p>\n    <b><a href="/device-motion.html">Magnetometer</a></b> permission status is <b id="magnetometer-status">unknown</b>.\n  </p>\n</div>\n\n<p id="logTarget"></p>',js:"if ('permissions' in navigator) {\n  var logTarget = document.getElementById('logTarget');\n\n  function handleChange(permissionName, newState) {\n    var timeBadge = new Date().toTimeString().split(' ')[0];\n    var newStateInfo = document.createElement('p');\n    newStateInfo.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> State of <b>' + permissionName + '</b> permission status changed to <b>' + newState + '</b>.';\n    logTarget.appendChild(newStateInfo);\n  }\n\n  function checkPermission(permissionName, descriptor) {\n    try {\n    navigator.permissions.query(Object.assign({name: permissionName}, descriptor))\n      .then(function (permission) {\n        document.getElementById(permissionName + '-status').innerHTML = permission.state;\n        permission.addEventListener('change', function (e) {\n          document.getElementById(permissionName + '-status').innerHTML = permission.state;\n          handleChange(permissionName, permission.state);\n        });\n      });\n    } catch (e) {\n    }\n  }\n\n  checkPermission('geolocation');\n  checkPermission('notifications');\n  checkPermission('push', {userVisibleOnly: true});\n  checkPermission('midi', {sysex: true});\n  checkPermission('camera');\n  checkPermission('microphone');\n  checkPermission('background-sync');\n  checkPermission('ambient-light-sensor');\n  checkPermission('accelerometer');\n  checkPermission('gyroscope');\n  checkPermission('magnetometer');\n\n  var noop = function () {};\n  navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n  \n  function requestGeolocation() {\n    navigator.geolocation.getCurrentPosition(noop);\n  }\n\n  function requestNotifications() {\n    Notification.requestPermission();\n  }\n\n  function requestPush() {\n    navigator.serviceWorker.getRegistration()\n      .then(function (serviceWorkerRegistration) {\n        serviceWorkerRegistration.pushManager.subscribe();\n      });\n  }\n\n  function requestMidi() {\n    navigator.requestMIDIAccess({sysex: true});\n  }\n  \n  function requestCamera() {\n    navigator.getUserMedia({video: true}, noop, noop)\n  }\n  \n  function requestMicrophone() {\n    navigator.getUserMedia({audio: true}, noop, noop)\n  }\n}",cssHidden:".demo-placeholder {\n  overflow: hidden;\n}\n\n#logTarget, .demo-placeholder div {\n  float: left;\n  width: 50%;\n}"},links:[{url:"https://w3c.github.io/permissions/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/04/permissions-api-for-the-web",title:"Permissions API for the Web"},{url:"https://permission.site",title:"Permissions Demo"}]}),new i({id:"contacts",name:"Contacts",description:["The <b>Contacts API</b> gives privileged Web applications a programmatic access to the user's address book maintained in the system.","The only implementation as of early 2020 is available in Google Chrome 80+. It targets \n         specifically the read-only scenario of picking the contacts to be used within the client application only – no modification is to be supported by the API. \n         It invokes platform-level contact picker and exposes to the querying application only the data selected by the user. It is only available on Android",'The initial version of the API was created for Firefox OS back in 2013 and implemented in Firefox. It allowed reading & modifying the contacts through the vCard-like format.\n         It was soon <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=927869" target="_blank" rel="noopener">disabled</a> due to implementation flaws, though.','Regardless from the programmatic access to the contacts API availability, the Web applications might ask for pre-filling the form data from the device address book with the help of \n         <a href="https://www.w3.org/TR/html51/sec-forms.html#element-attrdef-autocompleteelements-autocomplete" target="_blank" rel="noopener">form elements\' <code>autocomplete</code> attribute values</a>.'],api:"<p><b>Google Chrome proposal (2018)</b></p>\n      <dl>\n        <dt><code>navigator.contacts.select(properties, options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of contact properties from the address book selected by the user.</dd>\n      </dl>\n      <p><b>Firefox OS API (2013)</b></p>\n      <dl>\n        <dt><code>navigator.contacts.find(filterAndSortOptions)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of contacts from the address book according to the criteria specified.</dd>\n        <dt><code>navigator.contacts.save(new Contact())</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the newly created contact is inserted into the address book.</dd>\n        <dt><code>navigator.contacts.remove(contact)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the contact is removed from the address book.</dd>\n        <dt><code>navigator.contacts.addEventListener('contactschange', listener)</code></dt>\n        <dd>An event fired when the address book data has changed, containing all the added, removed and changed contact entries.</dd>\n      </dl>",tests:[i.containedIn("navigator.contacts","undefined"!=typeof window&&window.navigator&&window.navigator.contacts,"select"),i.containedIn("navigator.contacts","undefined"!=typeof window&&window.navigator&&(window.navigator.contacts||window.navigator.mozContacts),"oncontactschange",!1)],demo:{html:'<p>\n  <button onclick="readContacts()">Read Contacts</button>\n</p>\n\n<pre id="log"></pre>\n',js:"function readContacts() {\n  var api = (navigator.contacts || navigator.mozContacts);\n    \n  if (api && !!api.select) { // new Chrome API\n    api.select(['name', 'email'], {multiple: true})\n      .then(function (contacts) {\n        consoleLog('Found ' + contacts.length + ' contacts.');\n        if (contacts.length) {\n          consoleLog('First contact: ' + contacts[0].name + ' (' + contacts[0].email + ')');\n        }\n      })\n      .catch(function (err) {\n        consoleLog('Fetching contacts failed: ' + err.name);\n      });\n      \n  } else if (api && !!api.find) { // old Firefox OS API\n    var criteria = {\n      sortBy: 'familyName',\n      sortOrder: 'ascending'\n    };\n\n    api.find(criteria)\n      .then(function (contacts) {\n        consoleLog('Found ' + contacts.length + ' contacts.');\n        if (contacts.length) {\n          consoleLog('First contact: ' + contacts[0].givenName[0] + ' ' + contacts[0].familyName[0]);\n        }\n      })\n      .catch(function (err) {\n        consoleLog('Fetching contacts failed: ' + err.name);\n      });\n      \n  } else {\n    consoleLog('Contacts API not supported.');\n  }\n}\n\nfunction consoleLog(data) {\n  var logElement = document.getElementById('log');\n  logElement.innerHTML += data + '\\n';\n}"},links:[{url:"https://web.dev/contact-picker/",title:"A contact picker for the web"},{url:"https://wicg.github.io/contact-api/spec/",title:"Unofficial Specification Proposal Draft"},{url:"https://cloudfour.com/thinks/autofill-what-web-devs-should-know-but-dont/",title:"Article about auto-fill attribute values support"},{url:"https://www.w3.org/TR/contacts-manager-api/",title:"Specification Draft (pre-2015)"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Contacts_API",title:"MDN: Contacts API (Firefox OS version)"}]}),new i({id:"storage-quota",name:"Storage Quotas",description:["There were several attempts made, mostly by Google Chrome, to allow Web applications to query the system for the size of the storage space\n         currently used and available for the application. The most recent one, <b>Quota Estimation API</b>, includes also a way to request the stored data to be persisted by the browser that would otherwise be wiped out in case the system signalled memory pressure. \n         The permission to request this persistent storage capability might be granted by the browser based on the heuristic (i.e. Google Chrome) or might require explicit user consent (i.e. Firefox).","The older implementation, supported only in Chrome with <code>webkit-</code> prefix, maintained a separation between the temporary and persistent storage\n         and allowed the Web applications to request for more storage space, if needed."],api:"<dl>\n        <dt><code>navigator.storage.estimate()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the storage space estimated values; see below.</dd>\n        <dt><code>estimate.usage</code></dt>\n        <dd>Returns the estimated size of the storage currently used by the application, in bytes.</dd>\n        <dt><code>estimate.quota</code></dt>\n        <dd>Returns the estimated total size of the storage available for the application, in bytes, including already used.</dd>\n          \n        <dt><code>navigator.storage.persisted()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with a boolean informing whether the persistent storage permission was already requested and granted.</dd>\n        <dt><code>navigator.storage.persist()</code></dt>\n        <dd>Requests the persistent storage capability. Returns a <code>Promise</code> resolved with a boolean informing whether the persistent storage permission was granted (either via heuristic or user consent).</dd>\n      </dl>",tests:[i.containedIn("navigator.storage","undefined"!=typeof window&&(window.navigator||{}).storage,"estimate"),i.containedIn("navigator.storage","undefined"!=typeof window&&(window.navigator||{}).storage,"persist"),i.navigatorContains("persistentStorage",!1)],demo:{html:'<p>Estimated storage usage is <b id="usage">unknown</b> bytes.</p>\n<p>Estimated storage quota is <b id="quota">unknown</b> bytes.</p>\n<p>Estimated usage is <b id="percent">unknown</b>%.</p>\n<p>Persistent storage status is <b id="persisted">unknown</b>.</p>\n<p><button onclick="requestPersistence()">Request persistent storage</button></p>',js:"if ('storage' in navigator && 'estimate' in navigator.storage) {\n  navigator.storage.estimate()\n    .then(estimate => {\n      document.getElementById('usage').innerHTML = estimate.usage;\n      document.getElementById('quota').innerHTML = estimate.quota;\n      document.getElementById('percent').innerHTML = (estimate.usage * 100 / estimate.quota).toFixed(0);\n    });\n}\n\nif ('storage' in navigator && 'persisted' in navigator.storage) {\n  navigator.storage.persisted()\n    .then(persisted => {\n      document.getElementById('persisted').innerHTML = persisted ? 'persisted' : 'not persisted';\n    });\n}\n\nfunction requestPersistence() {\n  if ('storage' in navigator && 'persist' in navigator.storage) {\n    navigator.storage.persist()\n      .then(persisted => {\n        document.getElementById('persisted').innerHTML = persisted ? 'persisted' : 'not persisted';\n      });\n  }\n}"},links:[{url:"https://storage.spec.whatwg.org/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/offline/quota-research/",title:"Quota limitations analysis"}]}),new i({id:"touch",name:"Touch Gestures",description:["Traditionally, Web relies on a mouse and a keyboard as the only input devices, while mobile devices are mostly controlled by touch.\n        Mobile Web started with a bit touchy solution of translating touch events to mouse events like <code>mousedown</code>.","Newer HTML5 approach is to embrace touch as the first-class input mean, allowing Web applications to intercept and identify complex multitouch\n         gestures, free-hand drawing etc. Unfortunately, the support is twofold - either via touch events like <code>touchstart</code> that were first\n         introduced by Apple and standardized later as a de facto solution, when other vendors went the same route, or via the newer,\n         more general <b>Pointer Events</b> specification, initiated by Microsoft."],api:"<p><b>Touch Events API</b></p>\n        <dl>\n          <dt><code>element.addEventListener('touchstart', listener)</code></dt>\n          <dd>An event triggered when the finger has been placed on a DOM element.</dd>\n          <dt><code>element.addEventListener('touchmove', listener)</code></dt>\n          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>\n          <dt><code>element.addEventListener('touchend', listener)</code></dt>\n          <dd>An event triggered when the finger has been removed from a DOM element.</dd>\n        </dl>\n        <p><b>Pointer Events API</b></p>\n        <dl>\n          <dt><code>element.addEventListener('pointerdown', listener)</code></dt>\n          <dd>An event triggered when the finger has been placed on a DOM element.</dd>\n          <dt><code>element.addEventListener('pointermove', listener)</code></dt>\n          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>\n          <dt><code>element.addEventListener('pointerup', listener)</code></dt>\n          <dd>An event triggered when the finger has been removed from a DOM element.</dd>\n        </dl>",caniuse:"touch",demo:{html:'<div class="test-element">Drag me with one finger</div>\n<div class="test-element">Drag me with another finger</div>\n<div class="test-element">Drag me too</div>\n\n<p><small>Based on demo from <a href="https://www.quirksmode.org/m/tests/drag2.html">QuirksMode.org</a>.</small></p>',css:".test-element {\n  height: 100px;\n  background-color: black;\n  width: 100px;\n  z-index: 5;\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  color: white;\n  text-align: center;\n  -ms-touch-action: none;\n}\n\n.test-element:nth-child(2) {\n  top: 150px;\n  left: 150px;\n}\n\n.test-element:nth-child(3) {\n  top: 50px;\n  left: 100px;\n}",cssHidden:".demo-placeholder {\n  min-height: 300px;\n}",js:"function startDrag(e) {\n  this.ontouchmove = this.onmspointermove = moveDrag;\n\n  this.ontouchend = this.onmspointerup = function () {\n    this.ontouchmove = this.onmspointermove = null;\n    this.ontouchend = this.onmspointerup = null;\n  }\n\n  var pos = [this.offsetLeft, this.offsetTop];\n  var that = this;\n  var origin = getCoors(e);\n\n  function moveDrag(e) {\n    var currentPos = getCoors(e);\n    var deltaX = currentPos[0] - origin[0];\n    var deltaY = currentPos[1] - origin[1];\n    this.style.left = (pos[0] + deltaX) + 'px';\n    this.style.top = (pos[1] + deltaY) + 'px';\n    return false; // cancels scrolling\n  }\n\n  function getCoors(e) {\n    var coors = [];\n    if (e.targetTouches && e.targetTouches.length) {\n      var thisTouch = e.targetTouches[0];\n      coors[0] = thisTouch.clientX;\n      coors[1] = thisTouch.clientY;\n    } else {\n      coors[0] = e.clientX;\n      coors[1] = e.clientY;\n    }\n    return coors;\n  }\n}\n\nvar elements = document.querySelectorAll('.test-element');\n[].forEach.call(elements, function (element) {\n  element.ontouchstart = element.onmspointerdown = startDrag;\n});\n\ndocument.ongesturechange = function () {\n  return false;\n}"},tests:[i.windowContains("ontouchstart"),i.windowContains("onpointerdown")],links:[{url:"https://w3c.github.io/touch-events/",title:"Touch Events API Specification"},{url:"https://w3c.github.io/pointerevents/",title:"Pointer Events API Specification Draft"},{url:"http://www.quirksmode.org/mobile/tableTouch.html",title:"Detailed support table"},{url:"http://www.html5rocks.com/en/mobile/touch/",title:"Multi-touch Web Development"}]}),new i({id:"device-motion",aliases:["accelerometer"],name:"Device Motion",description:["The first-generation device motions support is a part of <b>Device Orientation API</b>. It allows Web applications to access the accelerometer data\n        expressed as acceleration (in m/s<sup>2</sup>) and gyroscope data expressed as rotation angle change (in &deg;/s) for each of the three dimensions, provided as events.","Since mid-2018 the newer, separate specifications for each sensor type, based on the <b>Generic Sensor API</b> are being introduced. The APIs providing direct access to the readings\n        of physical devices (<b>Accelerometer API</b>, <b>Gyroscope API</b> and <b>Magnetometer API</b>) as well as high-level fusion sensors made up by combining\n         the readings of the physical sensors (<b>Linear Acceleration Sensor API</b> and <b>Gravity Sensor API</b>).",'For the detection of the device\'s static position and orientation, see <a href="/device-position.html">Device Position</a>.'],api:"<p><b>As a part of (older) Device Orientation API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('devicemotion', listener)</code></dt>\n        <dd>An event fired when the significant changes in the device's acceleration or rotation has occured.</dd>\n        <dt><code>event.acceleration</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's acceleration excluding gravity for all three axes\n         (<code>acceleration.x</code>, <code>acceleration.y</code>, <code>acceleration.z</code>).</dd>\n        <dt><code>event.accelerationIncludingGravity</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's acceleration including gravity if the device is unable\n          to provide the data without the gravity effect using <code>event.acceleration</code>.</dd>\n        <dt><code>event.rotationRate</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's rotation rates for all three axes\n         (<code>rotationRate.alpha</code>, <code>rotationRate.beta</code>, <code>rotationRate.gamma</code>).</dd>\n        <dt><code>event.interval</code></dt>\n        <dd>A part of the event's payload returning the interval (in ms) at which the data is obtained from the accelerometer.</dd>\n      </dl>\n      <p><b>Accelerometer API</b></p>\n      <dl>\n        <dt><code>sensor = new Accelerometer()</code></dt>\n        <dd>Creates an object serving as a direct accessor to the accelerometer readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the accelerometer reading has changed, indicating that the sensor object contains updated acceleration in rad/s for all three axes (<code>sensor.x</code>, <code>sensor.y</code>, <code>sensor.z</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>\n      <p><b>Gyroscope API</b></p>\n      <dl>\n        <dt><code>sensor = new Gyroscope()</code></dt>\n        <dd>Creates an object serving as a direct accessor to the gyroscope readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the gyroscope reading has changed, indicating that the sensor object contains updated angular velocity in rad/s for all three axes (<code>sensor.x</code>, <code>sensor.y</code>, <code>sensor.z</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>\n      <p><b>Magnetometer API</b></p>\n      <dl>\n        <dt><code>sensor = new Magnetometer()</code></dt>\n        <dd>Creates an object serving as a direct accessor to the magnetometer readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the magnetometer reading has changed, indicating that the sensor object contains updated magnetic field for all three axes (<code>sensor.x</code>, <code>sensor.y</code>, <code>sensor.z</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>\n      <p><b>Linear Acceleration Sensor API</b></p>\n      <dl>\n        <dt><code>sensor = new LinearAccelerationSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the linear acceleration readings based on accelerometer and either gyroscope or magnetometer.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the accelerometer reading has changed, indicating that the sensor object contains updated acceleration values in m/s<sup>2</sup> for all three axes (<code>sensor.x</code>, <code>sensor.y</code>, <code>sensor.z</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>\n      <p><b>Gravity Sensor API</b></p>\n      <dl>\n        <dt><code>sensor = new GravitySensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the gravity readings based on accelerometer and gyroscope.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the accelerometer reading has changed, indicating that the sensor object contains updated acceleration values in m/s<sup>2</sup> for all three axes (<code>sensor.x</code>, <code>sensor.y</code>, <code>sensor.z</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",caniuse:"deviceorientation",tests:[i.windowContains("DeviceMotionEvent"),i.windowContains("Accelerometer"),i.windowContains("Gyroscope"),i.windowContains("Magnetometer"),i.windowContains("LinearAccelerationSensor"),i.windowContains("GravitySensor")],demo:{html:'<table>\n  <tr>\n    <td>API used</td>\n    <td id="moApi"></td>\n  </tr>\n  <tr>\n    <td>linear acceleration (excl. gravity)</td>\n    <td id="moAccel"></td>\n  </tr>\n  <tr>\n    <td>acceleration incl. gravity</td>\n    <td id="moAccelGrav"></td>\n  </tr>\n  <tr>\n    <td>rotation rate</td>\n    <td id="moRotation"></td>\n  </tr>\n  <tr>\n    <td>interval (ms)</td>\n    <td id="moInterval"></td>\n  </tr>\n</table>\n\n<p><small>Demo based on <a href="https://www.html5rocks.com/en/tutorials/device/orientation/" target="_blank" rel="noopener">HTML5 Rocks</a> article.</small></p>',js:"if ('LinearAccelerationSensor' in window && 'Gyroscope' in window) {\n  document.getElementById('moApi').innerHTML = 'Generic Sensor API';\n  \n  let lastReadingTimestamp;\n  let accelerometer = new LinearAccelerationSensor();\n  accelerometer.addEventListener('reading', e => {\n    if (lastReadingTimestamp) {\n      intervalHandler(Math.round(accelerometer.timestamp - lastReadingTimestamp));\n    }\n    lastReadingTimestamp = accelerometer.timestamp\n    accelerationHandler(accelerometer, 'moAccel');\n  });\n  accelerometer.start();\n  \n  if ('GravitySensor' in window) {\n    let gravity = new GravitySensor();\n    gravity.addEventListener('reading', e => accelerationHandler(gravity, 'moAccelGrav'));\n    gravity.start();\n  }\n  \n  let gyroscope = new Gyroscope();\n  gyroscope.addEventListener('reading', e => rotationHandler({\n    alpha: gyroscope.x,\n    beta: gyroscope.y,\n    gamma: gyroscope.z\n  }));\n  gyroscope.start();\n  \n} else if ('DeviceMotionEvent' in window) {\n  document.getElementById('moApi').innerHTML = 'Device Motion API';\n  \n  var onDeviceMotion = function (eventData) {\n    accelerationHandler(eventData.acceleration, 'moAccel');\n    accelerationHandler(eventData.accelerationIncludingGravity, 'moAccelGrav');\n    rotationHandler(eventData.rotationRate);\n    intervalHandler(eventData.interval);\n  }\n  \n  window.addEventListener('devicemotion', onDeviceMotion, false);\n} else {\n  document.getElementById('moApi').innerHTML = 'No Accelerometer & Gyroscope API available';\n}\n\nfunction accelerationHandler(acceleration, targetId) {\n  var info, xyz = \"[X, Y, Z]\";\n\n  info = xyz.replace(\"X\", acceleration.x && acceleration.x.toFixed(3));\n  info = info.replace(\"Y\", acceleration.y && acceleration.y.toFixed(3));\n  info = info.replace(\"Z\", acceleration.z && acceleration.z.toFixed(3));\n  document.getElementById(targetId).innerHTML = info;\n}\n\nfunction rotationHandler(rotation) {\n  var info, xyz = \"[X, Y, Z]\";\n\n  info = xyz.replace(\"X\", rotation.alpha && rotation.alpha.toFixed(3));\n  info = info.replace(\"Y\", rotation.beta && rotation.beta.toFixed(3));\n  info = info.replace(\"Z\", rotation.gamma && rotation.gamma.toFixed(3));\n  document.getElementById(\"moRotation\").innerHTML = info;\n}\n\nfunction intervalHandler(interval) {\n  document.getElementById(\"moInterval\").innerHTML = interval;\n}",jsOnExit:"if (onDeviceMotion) {\n    window.removeEventListener('devicemotion', onDeviceMotion);\n}"},links:[{url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html#devicemotion",title:"Device Orientation API Specification Draft"},{url:"https://w3c.github.io/accelerometer/",title:"Accelerometer API Specification Draft"},{url:"https://w3c.github.io/gyroscope/",title:"Gyroscope API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"https://www.w3.org/TR/motion-sensors/",title:"Motion Sensors Explainer"},{url:"https://developers.google.com/web/updates/2017/09/sensors-for-the-web",title:"Google Developers: Sensors For The Web"},{url:"https://github.com/kenchris/sensor-polyfills",title:"Polyfills for the W3C Generic Sensor APIs"}]}),new i({id:"speech-recognition",name:"Speech Recognition",description:["The speech recognition part of the <b>Web Speech API</b> allows authorized Web applications to access the device's microphone\n        and produces a transcript of the voice being recorded. This allows Web applications to use voice as one of the input & control method,\n        similar to touch or keyboard.",'Technically, the speech recognition functionality can also be achieved by <a href="/camera-microphone.html">accessing the microphone</a>\n        and processing the audio stream using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank" rel="noopener">Web Audio API</a>.\n        An examplary library that takes such an approach is <a href="http://syl22-00.github.io/pocketsphinx.js/" target="_blank" rel="noopener">pocketsphinx.js</a>.'],api:"<dl>\n        <dt><code>let recognition = new SpeechRecognition()</code></dt>\n        <dd>Creates an object used to configure the recognition process and to receive events about the recognition results.</dd>\n        <dt><code>recognition.continuous</code></dt>\n        <dd>A boolean property indicating whether the process should stop after the first final transcripts received (when <code>false</code>, the default)\n          or send multiple events, until the process is explicitly stopped (when <code>true</code>).</dd>\n        <dt><code>recognition.interimResults</code></dt>\n        <dd>A boolean property indicating whether interim (not-yet-final) transcripts should be provided, <code>false</code> by default.</dd>\n        <dt><code>recognition.lang</code></dt>\n        <dd>A property to set up the language for the recognition.</dd>\n        <dt><code>recognition.addEventListener('result', listener)</code></dt>\n        <dd>An event fired when the process has produced the transcripts for the piece of audio recorded. The listener is called with an array of results,\n          each containing a boolean <code>final</code> flag indicating whether the result might be updated in the future event (when <code>false</code>)\n          or not and the collection of alternative transcripts, each with <code>transcript</code> itself and a <code>confidence</code> value.</dd>\n        <dt><code>recognition.addEventListener('nomatch', listener)</code></dt>\n        <dd>An event fired when the process has not produced any transcripts for the piece of audio recorded with the confidence exceeding the minimal\n          threshold, i.e. it is not possible to provide the transcription.</dd>\n        <dt><code>recognition.start()</code></dt>\n        <dd>Starts the recognition process.</dd>\n        <dt><code>recognition.stop()</code></dt>\n        <dd>Stops the recognition process; useful when <code>recognition.continuous</code> is set to <code>true</code>.</dd>\n      </dl>",caniuse:"speech-recognition",tests:[i.windowContains("SpeechRecognition")],links:[{url:"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#speechreco-section",title:"Specification"},{url:"http://www.sitepoint.com/introducing-web-speech-api/",title:"SitePoint: Introducing the Web Speech API"},{url:"https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API",title:"Voice Driven Web Apps: Introduction to the Web Speech API"},{url:"https://shaungallagher.github.io/say_restyle/",title:"Demo - Edit the webpage with your voice"}]}),new i({id:"clipboard",name:"Clipboard (Copy & Paste)",description:["The <b>Clipboard API</b> gives Web applications a way to react on cut, copy and paste operations performed by the user as well as read from or write to the system clipboard directly on behalf of user.",'There are two flavors of Clipboard API available - the older, synchronous, and the newer, asynchronous. The newer API is limited to HTTPS and require explicit <a href="/permissions.html">user permission</a> for pasting operation – it is not available in Safari as of early 2020, though.\n      The older API did not address privacy concerns properly and thus pasting is no longer functional in most browsers.'],api:"<p><b>Older, synchronous API</b></p>\n      <dl>\n        <dt><code>document.addEventListener('cut/copy/paste', listener)</code></dt>\n        <dd>An event fired when the user invoked the particular clipboard operation (either cut, copy or paste).</dd>\n        <dt><code>event.clipboardData.setData('text/plain', data)</code></dt>\n        <dd>Sets the data that is to be written to the clipboard by the cut or copy operations in the specified format.</dd>\n        <dt><code>event.clipboardData.getData('text/plain')</code></dt>\n        <dd>Returns the data that has been read from the clipboard by the paste operation in the specified format.</dd>\n        <dt><code>document.execCommand('cut/copy/paste')</code></dt>\n        <dd>Programatically invokes the specified clipboard operation (either cut, copy or paste) on the data or element currently having a focus.</dd>\n      </dl>\n      <p><b>Newer, asynchronous API</b></p>\n      <dl>\n        <dt><code>navigator.clipboard.writeText(text)</code></dt>\n        <dd>Writes the text to the clipboard. Returns a <code>Promise</code> resolved when the operation has succeeded.</dd>\n        <dt><code>navigator.clipboard.readText()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the text read from the clipboard.</dd>\n        <dt><code>navigator.clipboard.write(new ClipboardItem(data))</code></dt>\n        <dd>Writes the generic <code>ClipboardItem</code> data to the clipboard, allowing it to handle objects of different types, i.e. images. Returns a <code>Promise</code> resolved when the operation has succeeded.</dd>\n        <dt><code>const clipboardItem = await navigator.clipboard.read()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of <code>ClipboardItem</code>s read from the clipboard.</dd>\n        <dt><code>const blob = await clipboardItem.getType(type)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the data of requested <code>type</code> read from the clipboard.</dd>\n      </dl>",caniuse:"clipboard",tests:[i.navigatorContains("clipboard"),i.windowContains("ClipboardEvent"),i.documentContains("oncut"),i.documentContains("oncopy"),i.documentContains("onpaste")],demo:{html:'<p class="heading">Use the forms below for programmatic clipboard access or invoke standard copy/cut/paste operations with your keyboard.</p>\n<section>\n  <label><input type="radio" name="api" value="sync"> Use older, synchronous API</label><br/>\n  <label><input type="radio" name="api" value="async" checked> Use newer, asynchronous API</label>\n</section>\n<section>\n  <h2>Cut/Paste Example</h2>\n  <p>\n    <textarea class="js-cuttextarea">Hello! Cut me programatically or maybe try pasting here.</textarea>\n  </p>\n\n  <p>\n    <button class="js-textareacutbtn">Cut text programatically</button>\n    <button class="js-textareapastebtn">Paste text programatically</button>\n  </p>\n</section>\n\n<section>\n  <h2>Copy Example</h2>\n  <p>Email me at <a class="js-emaillink" href="mailto:matt@example.co.uk">matt@example.co.uk</a></p>\n  <p>\n    <button class="js-emailcopybtn">Copy Email Address programatically</button>\n  </p>\n</section>\n\n<p id="logTarget"></p>\n\n<p><small>Demo based on <a href="https://googlechrome.github.io/samples/cut-and-copy/index.html" target="_blank" rel="noopener">Google Chrome examples</a>.</small></p>',js:"var logTarget = document.getElementById('logTarget');\n\nfunction useAsyncApi() {\n  return document.querySelector('input[value=async]').checked;\n}\n\nfunction log(event) {\n  var timeBadge = new Date().toTimeString().split(' ')[0];\n  var newInfo = document.createElement('p');\n  newInfo.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + event + '</b>.';\n  logTarget.appendChild(newInfo);\n}\n\nfunction performCopyEmail() {\n  var selection = window.getSelection();\n  var emailLink = document.querySelector('.js-emaillink');\n\n  if (useAsyncApi()) {\n    navigator.clipboard.writeText(emailLink.textContent)\n      .then(() => log('Async writeText successful, \"' + emailLink.textContent + '\" written'))\n      .catch(err => log('Async writeText failed with error: \"' + err + '\"'));\n  } else {\n    selection.removeAllRanges();\n    var range = document.createRange();\n    range.selectNode(emailLink);\n    selection.addRange(range);\n  \n    try {\n      var successful = document.execCommand('copy');\n      var msg = successful ? 'successful' : 'unsuccessful';\n      log('Copy email command was ' + msg);\n    } catch (err) {\n      log('execCommand Error', err);\n    }\n    \n    selection.removeAllRanges();\n  }\n}\n\nfunction performCutTextarea() {\n  var cutTextarea = document.querySelector('.js-cuttextarea');\n\n  if (useAsyncApi()) {\n    navigator.clipboard.writeText(cutTextarea.textContent)\n      .then(() => {\n        log('Async writeText successful, \"' + cutTextarea.textContent + '\" written');\n        cutTextarea.textContent = '';\n      })\n      .catch(err => log('Async writeText failed with error: \"' + err + '\"'));\n  } else {\n    var hasSelection = document.queryCommandEnabled('cut');\n    cutTextarea.select();\n  \n    try {\n      var successful = document.execCommand('cut');\n      var msg = successful ? 'successful' : 'unsuccessful';\n      log('Cutting text command was ' + msg);\n    } catch (err) {\n      log('execCommand Error', err);\n    }\n  }\n}\n\nfunction performPaste() {\n  var pasteTextarea = document.querySelector('.js-cuttextarea');\n  \n  if (useAsyncApi()) {\n    navigator.clipboard.readText()\n      .then((text) => {\n        pasteTextarea.textContent = text;\n        log('Async readText successful, \"' + text + '\" written');\n      })\n      .catch((err) => log('Async readText failed with error: \"' + err + '\"'));\n  } else {\n    pasteTextarea.focus();\n    try {\n      var successful = document.execCommand('paste');\n      var msg = successful ? 'successful' : 'unsuccessful';\n      log('Pasting text command was ' + msg);\n    } catch (err) {\n      log('execCommand Error', err);\n    }\n  }\n}\n\n// Get the buttons\nvar cutTextareaBtn = document.querySelector('.js-textareacutbtn');\nvar copyEmailBtn = document.querySelector('.js-emailcopybtn');\nvar pasteTextareaBtn = document.querySelector('.js-textareapastebtn');\n\n// Add click event listeners\ncopyEmailBtn.addEventListener('click', performCopyEmail);\ncutTextareaBtn.addEventListener('click', performCutTextarea);\npasteTextareaBtn.addEventListener('click', performPaste);\n\nfunction logUserOperation(event) {\n  log('User performed <b>' + event.type + '</b> operation. Payload is: <b>' + event.clipboardData.getData('text/plain') + '</b>');\n}\n\ndocument.addEventListener('cut', logUserOperation);\ndocument.addEventListener('copy', logUserOperation);\ndocument.addEventListener('paste', logUserOperation);",jsOnExit:"document.removeEventListener('cut', logUserOperation);\ndocument.removeEventListener('copy', logUserOperation);\ndocument.removeEventListener('paste', logUserOperation);"},links:[{url:"https://w3c.github.io/clipboard-apis/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2018/03/clipboardapi",title:"Unblocking Clipboard Access"},{url:"https://web.dev/image-support-for-async-clipboard/",title:"Image support for the async clipboard API"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent",title:"MDN: ClipboardEvent (old, synchronous API)"},{url:"https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/",title:"The Definitive Guide to Copying and Pasting in JavaScript (old, synchronous API)"}]}),new i({id:"pointer-adaptation",name:"Pointing Device Adaptation",description:['The <b>Interaction Media</b> part of CSS4 specification defines the media queries allowing Web applications to alter its layout\n        and user interface depending on the way the user is supposed to interact with the application. It allows to identify the browser\'s primary\n        pointer (i.e. mouse, touch, keyboard) and decides whether it is fine or coarse and whether hovering over the element is possible using\n        the "classic" interface (like touch on tablet), so that the interface might be shrunk or enlarged and hover interactions enabled\n        or replaced with an alternative accordingly.',"Additionally, the specification defines the similar media queries for cases when all the pointing methods (not only the primary one)\n        should be considered - i.e. to answer the question is hovering possible at all, using any method available."],api:'<dl class="language-css">\n        <dt><code>@media (pointer: fine)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows accurate pointing.</dd>\n        <dt><code>@media (pointer: coarse)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device does not allow accurate pointing.</dd>\n        <dt><code>@media (pointer: none)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary interacting device is not capable of pointing\n          (i.e. keyboard).</dd>\n        <dt><code>@media (hover)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows hovering over elements.</dd>\n        <dt><code>@media (any-pointer: fine)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices available allows accurate pointing.</dd>\n        <dt><code>@media (any-pointer: coarse)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices does not allow accurate pointing.</dd>\n        <dt><code>@media (any-hover)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices allows hovering over elements.</dd>\n      </dl>',caniuse:"css-media-interaction",tests:[i.rawTest("window","matchMedia('(pointer: none), (pointer: coarse), (pointer: fine)').matches",()=>"undefined"!=typeof window&&window.matchMedia&&window.matchMedia("(pointer: none), (pointer: coarse), (pointer: fine)").matches)],demo:{html:'<p>The button is larger when the primary pointer is coarse. The tooltip is visible on hover when the pointer allows hovering.</p>\n\n<div class="text-center">\n  <button id="button">The button</button>\n  <div id="tooltip" class="tooltip bottom" role="tooltip">\n    <div class="tooltip-arrow"></div>\n    <div class="tooltip-inner">\n      Tooltip visible on hover when pointer allows hover\n    </div>\n  </div>\n</div>',css:"@media (hover: hover) {\n  #tooltip {\n    display: none;\n  }\n  #button:hover ~ #tooltip {\n    display: block;\n  }\n}\n\n@media (pointer: fine) {\n  #button {\n    font-size: x-small;\n  }\n}\n@media (pointer: coarse) {\n  #button {\n    font-size: x-large;\n  }\n}",cssHidden:"p, button {\n  margin: 10px;\n}\n#tooltip {\n  position: relative;\n  opacity: 1;\n}\n#tooltip .tooltip-inner {\n  margin: 0 auto;\n}"},links:[{url:"http://www.w3.org/TR/mediaqueries-4/#mf-interaction",title:"Specification Draft"},{url:"http://jordanm.co.uk/2013/11/11/potential-use-cases-for-script-hover-and-pointer.html",title:"Potential use cases for script, hover and pointer CSS Level 4 Media Features"},{url:"https://dev.opera.com/articles/media-features/",title:"Dev.Opera: Interaction Media Features and their potential (for incorrect assumptions)"},{url:"https://github.com/twbs/mq4-hover-shim",title:"A shim for the Media Queries Level 4 `hover` media feature"},{url:"http://radar.oreilly.com/2015/08/proposing-css-input-modailty.html",title:"Proposing CSS input modality"}]}),new i({id:"device-position",aliases:["device-orientation"],name:"Device Position",description:['The first-generation device position support is a part of <b>Device Orientation API</b>. It allows Web applications to access the gyroscope and compass data in order to determine the static orientation\n        of the user\'s device in all the three dimensions, expressed in degrees of divergence from the "natural" northbound lie flat position.','The newer specification based on the <strong>Generic Sensor API</strong> also exists - the Orientation Sensor APIs (in absolute and relative variants). \n          Contrary to the previous specification it provides readings expressed as <a href="https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation" target="_blank" rel="noopener">quaternions</a> what makes it directly compatible with drawing environments like WebGL.','For the detection of the device\'s movements, see <a href="/device-motion.html">Device Motion</a>.'],api:"<p><b>As a part of Device Orientation API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('deviceorientation', listener)</code></dt>\n        <dd>An event fired when the significant changes in the device's orientation has occured.</dd>\n        <dt><code>event.alpha</code></dt>\n        <dd>Returns device's current heading (direction) in degrees, counted counterclockwise from the North (0) through West (90), South (180) and East (270).</dd>\n        <dt><code>event.beta</code></dt>\n        <dd>Returns device's current front/back tilt in degrees, 0 when lying horizontally upward facing, 90 when in vertical position,\n          -90 in vertical upside down, -180 when horizontal upside down.</dd>\n        <dt><code>event.gamma</code></dt>\n        <dd>Returns device's current left/right tilt in degrees, from -90 when turned left to 90 when turned right.</dd>\n      </dl>\n      <p><b>Absolute Orientation Sensor API</b></p>\n      <dl>\n        <dt><code>sensor = new AbsoluteOrientationSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the orientation readings in relation to the Earth’s reference coordinate system, based on accelerometer, gyroscope and magenetometer readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the orientation reading has changed, indicating that the sensor object contains updated quaternion representing the device's orientation.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n        <dt><code>sensor.quaternion</code></dt>\n        <dd>Returns the last available reading expressed as quaternion representing the device's orientation.</dd>\n      </dl>\n      <p><b>Relative Orientation Sensor API</b></p>\n      <dl>\n        <dt><code>sensor = new RelativeOrientationSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the orientation readings in relation to a stationary reference coordinate system, based on accelerometer and gyroscope readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the orientation reading has changed, indicating that the sensor object contains updated quaternion representing the device's orientation.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n        <dt><code>sensor.quaternion</code></dt>\n        <dd>Returns the last available reading expressed as quaternion representing the device's orientation.</dd>\n      </dl>",caniuse:"deviceorientation",demo:{html:'<table>\n  <tr>\n    <td>Tilt Left/Right [gamma]</td>\n    <td id="doTiltLR"></td>\n  </tr>\n  <tr>\n    <td>Tilt Front/Back [beta]</td>\n    <td id="doTiltFB"></td>\n  </tr>\n  <tr>\n    <td>Direction [alpha]</td>\n    <td id="doDirection"></td>\n  </tr>\n</table>\n\n<div id="logoContainer">\n  <img src="https://www.w3.org/html/logo/downloads/HTML5_Badge_512.png" id="imgLogo">\n</div>\n\n<p><small>Demo from <a href="https://www.html5rocks.com/en/tutorials/device/orientation/" target="_blank" rel="noopener">HTML5 Rocks</a> article.</small></p>',css:".container {\n  perspective: 300;\n  -webkit-perspective: 300;\n}\n\n#imgLogo {\n  width: 275px;\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  padding: 15px;\n}",js:'if (\'DeviceOrientationEvent\' in window) {\n  window.addEventListener(\'deviceorientation\', deviceOrientationHandler, false);\n} else {\n  document.getElementById(\'logoContainer\').innerText = \'Device Orientation API not supported.\';\n}\n\nfunction deviceOrientationHandler (eventData) {\n  var tiltLR = eventData.gamma;\n  var tiltFB = eventData.beta;\n  var dir = eventData.alpha;\n  \n  document.getElementById("doTiltLR").innerHTML = Math.round(tiltLR);\n  document.getElementById("doTiltFB").innerHTML = Math.round(tiltFB);\n  document.getElementById("doDirection").innerHTML = Math.round(dir);\n\n  var logo = document.getElementById("imgLogo");\n  logo.style.webkitTransform = "rotate(" + tiltLR + "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";\n  logo.style.MozTransform = "rotate(" + tiltLR + "deg)";\n  logo.style.transform = "rotate(" + tiltLR + "deg) rotate3d(1,0,0, " + (tiltFB * -1) + "deg)";\n}',jsOnExit:"window.removeEventListener('deviceorientation', deviceOrientationHandler);"},tests:[i.windowContains("DeviceOrientationEvent"),i.windowContains("AbsoluteOrientationSensor"),i.windowContains("RelativeOrientationSensor")],links:[{url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html",title:"Older Device Orientation API Specification Draft"},{url:"https://www.w3.org/TR/orientation-sensor/",title:"Orientation Sensors specification draft"},{url:"https://www.w3.org/TR/motion-sensors/",title:"Motion Sensors Explainer"},{url:"https://developers.google.com/web/updates/2017/09/sensors-for-the-web",title:"Google Developers: Sensors For The Web"},{url:"https://github.com/kenchris/sensor-polyfills",title:"Polyfills for the W3C Generic Sensor APIs"}]}),new i({id:"fullscreen",name:"Fullscreen",description:'The <b>Fullscreen API</b> allows Web applications to present itself or the part of itself in the fullscreen mode,\n        without browser UI elements visible. It also serves as the prerequisite state for the <a href="/screen-orientation.html">orientation lock</a>.',api:"<dl>\n        <dt><code>document.fullscreenEnabled</code></dt>\n        <dd>Returns a boolean indicating whether the fullscreen mode is available and allowed.</dd>\n        <dt><code>element.requestFullscreen()</code></dt>\n        <dd>Requests a fullscreen mode display for a given <code>element</code>. Returns a <code>Promise</code> resolved when the request was successful.</dd>\n        <dt><code>document.fullscreenElement</code></dt>\n        <dd>Returns a reference to the element currently being displayed in the fullscreen mode.</dd>\n        <dt><code>document.exitFullscreen()</code></dt>\n        <dd>Exits the fullscreen mode.</dd>\n        <dt><code>document.addEventListener('fullscreenchange', listener)</code></dt>\n        <dd>An event fired when the fullscreen mode has been entered or exited.</dd>\n      </dl>",caniuse:"fullscreen",demo:{html:'<p>\n  <button class="start" id="startFull">Start fullscreen on the whole page</button>\n  <button id="exit">Exit fullscreen</button>\n</p>\n\n<div>\n  <button class="start" id="startBox">Start fullscreen on just the green box</button>\n  <div id="box">THE BOX</div>\n</div>\n\n<p id="logTarget"></p>',css:"#box {\n  width: 90px;\n  height: 20px;\n  background-color: green;\n  color: white;\n  text-align: center;\n  display: inline-block;\n  border-radius: 5px;\n}\n\n#exit {\n  display: none;\n}",js:"var $ = document.querySelector.bind(document);\nvar $$ = function (selector) {\n  return [].slice.call(document.querySelectorAll(selector), 0);\n}\nvar target = $('#logTarget');\n\nfunction logChange (event) {\n  var timeBadge = new Date().toTimeString().split(' ')[0];\n  var newState = document.createElement('p');\n  newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + event + '.';\n  target.appendChild(newState);\n}\n\nvar prefix = null;\nif ('requestFullscreen' in document.documentElement) {\n  prefix = 'fullscreen';\n} else if ('mozRequestFullScreen' in document.documentElement) {\n  prefix = 'mozFullScreen';\n} else if ('webkitRequestFullscreen' in document.documentElement) {\n  prefix = 'webkitFullscreen';\n} else if ('msRequestFullscreen') {\n  prefix = 'msFullscreen';\n}\n\nvar onFullscreenChange = function () {\n  var elementName = 'not set';\n  if (document[prefix + 'Element']) {\n    elementName = document[prefix + 'Element'].nodeName;\n  }\n  logChange('New fullscreen element is <b>' + elementName + '</b>');\n  onFullscreenHandler(!!document[prefix + 'Element']);\n}\n\nif (document[prefix + 'Enabled']) {\n  var onFullscreenHandler = function (started) {\n    $('#exit').style.display = started ? 'inline-block' : 'none';\n    $$('.start').forEach(function (x) {\n      x.style.display = started ? 'none' : 'inline-block';\n    });\n  };\n\n  document.addEventListener(prefix.toLowerCase() + 'change', onFullscreenChange);\n\n  var goFullScreen = null;\n  var exitFullScreen = null;\n  if ('requestFullscreen' in document.documentElement) {\n    goFullScreen = 'requestFullscreen';\n    exitFullScreen = 'exitFullscreen';\n  } else if ('mozRequestFullScreen' in document.documentElement) {\n    goFullScreen = 'mozRequestFullScreen';\n    exitFullScreen = 'mozCancelFullScreen';\n  } else if ('webkitRequestFullscreen' in document.documentElement) {\n    goFullScreen = 'webkitRequestFullscreen';\n    exitFullScreen = 'webkitExitFullscreen';\n  } else if ('msRequestFullscreen') {\n    goFullScreen = 'msRequestFullscreen';\n    exitFullScreen = 'msExitFullscreen';\n  }\n\n  var goFullscreenHandler = function (element) {\n    return function () {\n      var maybePromise = element[goFullScreen]();\n      if (maybePromise && maybePromise.catch) {\n        maybePromise.catch(function (err) {\n          logChange('Cannot acquire fullscreen mode: ' + err);\n        });\n      }\n    };\n  };\n\n  $('#startFull').addEventListener('click', goFullscreenHandler(document.documentElement));\n  $('#startBox').addEventListener('click', goFullscreenHandler($('#box')));\n\n  $('#exit').addEventListener('click', function () {\n    document[exitFullScreen]();\n  });\n}",jsOnExit:"document.removeEventListener(prefix.toLowerCase() + 'change', onFullscreenChange);"},tests:[i.containedIn("document.documentElement","undefined"!=typeof window&&window.document&&document.documentElement,"requestFullScreen"),i.containedIn("document.documentElement","undefined"!=typeof window&&window.document&&document.documentElement,"requestFullscreen")],links:[{url:"https://fullscreen.spec.whatwg.org/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API",title:"MDN: Fullscreen API"},{url:"https://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/",title:"Mozilla Hacks: Using the Fullscreen API in Web browsers"}]}),new i({id:"screen-orientation",aliases:["orientation-lock"],name:"Screen Orientation & Lock",description:["The <b>Screen Orientation API</b> allows Web applications to get the information about the current orientation of the document\n        (portrait or landscape) as well as to lock the screen orientation in a requested state.","The current version of the specification defines this feature fully within <code>window.screen.orientation</code> object. The previous version,\n        implemented once in Microsoft Edge, separated the orientation lock to <code>window.screen.lockOrientation</code>."],api:"<dl>\n        <dt><code>window.screen.orientation.type</code></dt>\n        <dd>Returns the current screen orientation type as one of <code>portrait-primary</code>, <code>portrait-secondary</code> (upside down),\n          <code>landscape-primary</code> and <code>landscape-secondary</code> (upside down).</dd>\n        <dt><code>window.screen.orientation.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the document orientation has changed.</dd>\n        <dt><code>window.screen.orientation.lock(lockType)</code></dt>\n        <dd>Requests a screen lock in the <code>lockType</code> specified. Returns a <code>Promise</code> resolved when the lock was acquired successfully.</dd>\n        <dt><code>window.screen.orientation.unlock()</code></dt>\n        <dd>Removes previously acquired screen orientation lock.</dd>\n      </dl>",caniuse:"screen-orientation",demo:{html:'<div id="device"></div>\n\n<p>Current screen orientation is <b id="orientationType">unknown</b>.</p>\n\n<p>\n  <button id="lock">Lock in current orientation</button>\n  <button id="unlock">Release the lock</button>\n</p>\n\n<p id="logTarget"></p>',css:"#device {\n  margin: 10px;\n  border: 1px solid black;\n  border-radius: 10px;\n}\n\n#device:after {\n  content: 'A';\n  font: 80px serif;\n  display: block;\n  text-align: center;\n}\n\n#unlock {\n  display: none;\n}",js:"var $ = document.getElementById.bind(document);\n\nvar orientKey = 'orientation';\nif ('mozOrientation' in screen) {\n  orientKey = 'mozOrientation';\n} else if ('msOrientation' in screen) {\n  orientKey = 'msOrientation';\n}\n\nvar target = $('logTarget');\nvar device = $('device');\nvar orientationTypeLabel = $('orientationType');\n\nfunction logChange (event) {\n  var timeBadge = new Date().toTimeString().split(' ')[0];\n  var newState = document.createElement('p');\n  newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + event + '.';\n  target.appendChild(newState);\n}\n\nif (screen[orientKey]) {\n  function update() {\n    var type = screen[orientKey].type || screen[orientKey];\n    orientationTypeLabel.innerHTML = type;\n\n    var landscape = type.indexOf('landscape') !== -1;\n\n    if (landscape) {\n      device.style.width = '180px';\n      device.style.height = '100px';\n    } else {\n      device.style.width = '100px';\n      device.style.height = '180px';\n    }\n\n    var rotate = type.indexOf('secondary') === -1 ? 0 : 180;\n    var rotateStr = 'rotate(' + rotate + 'deg)';\n\n    device.style.webkitTransform = rotateStr;\n    device.style.MozTransform = rotateStr;\n    device.style.transform = rotateStr;\n  }\n\n  update();\n\n  var onOrientationChange = null;\n\n  if ('onchange' in screen[orientKey]) { // newer API\n    onOrientationChange = function () {\n      logChange('Orientation changed to <b>' + screen[orientKey].type + '</b>');\n      update();\n    };\n  \n    screen[orientKey].addEventListener('change', onOrientationChange);\n  } else if ('onorientationchange' in screen) { // older API\n    onOrientationChange = function () {\n      logChange('Orientation changed to <b>' + screen[orientKey] + '</b>');\n      update();\n    };\n  \n    screen.addEventListener('orientationchange', onOrientationChange);\n  }\n\n  // browsers require full screen mode in order to obtain the orientation lock\n  var goFullScreen = null;\n  var exitFullScreen = null;\n  if ('requestFullscreen' in document.documentElement) {\n    goFullScreen = 'requestFullscreen';\n    exitFullScreen = 'exitFullscreen';\n  } else if ('mozRequestFullScreen' in document.documentElement) {\n    goFullScreen = 'mozRequestFullScreen';\n    exitFullScreen = 'mozCancelFullScreen';\n  } else if ('webkitRequestFullscreen' in document.documentElement) {\n    goFullScreen = 'webkitRequestFullscreen';\n    exitFullScreen = 'webkitExitFullscreen';\n  } else if ('msRequestFullscreen') {\n    goFullScreen = 'msRequestFullscreen';\n    exitFullScreen = 'msExitFullscreen';\n  }\n\n  $('lock').addEventListener('click', function () {\n    document.documentElement[goFullScreen] && document.documentElement[goFullScreen]();\n\n    var promise = null;\n    if (screen[orientKey].lock) {\n      promise = screen[orientKey].lock(screen[orientKey].type);\n    } else {\n      promise = screen.orientationLock(screen[orientKey]);\n    }\n\n    promise\n      .then(function () {\n        logChange('Screen lock acquired');\n        $('unlock').style.display = 'block';\n        $('lock').style.display = 'none';\n      })\n      .catch(function (err) {\n        logChange('Cannot acquire orientation lock: ' + err);\n        document[exitFullScreen] && document[exitFullScreen]();\n      });\n  });\n\n  $('unlock').addEventListener('click', function () {\n    document[exitFullScreen] && document[exitFullScreen]();\n\n    if (screen[orientKey].unlock) {\n      screen[orientKey].unlock();\n    } else {\n      screen.orientationUnlock();\n    }\n\n    logChange('Screen lock removed.');\n    $('unlock').style.display = 'none';\n    $('lock').style.display = 'block';\n  });\n}",jsOnExit:"if ('onchange' in screen[orientKey]) { // newer API\n    screen[orientKey].removeEventListener('change', onOrientationChange);\n  } else if ('onorientationchange' in screen) { // older API\n    screen.removeEventListener('orientationchange', onOrientationChange);\n  }"},tests:[i.containedIn("screen","undefined"!=typeof window&&window.screen,"orientation"),i.containedIn("screen","undefined"!=typeof window&&window.screen,"lockOrientation",!1)],links:[{url:"https://w3c.github.io/screen-orientation/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation",title:"MDN: Screen.orientation"},{url:"http://www.sitepoint.com/introducing-screen-orientation-api/",title:"SitePoint: Introducing the Screen Orientation API"}]}),new i({id:"wake-lock",name:"Wake Lock",description:["The <b>Wake Lock API</b> allows Web applications to prevent the resource such as the screen or system from becoming\n        unavailable as long as the application holds a lock for that resource. The purpose of the API is to let the user or the application to complete\n        the ongoing long activity - like navigation or reading - uninterrupted.","The initial implementation attempt that was experimentally available in some browsers was just a boolean flag controllable by the application. It was considered too open for abuse and too implicit.",'More explicit approach is proposed as of mid-2019 and is available behind an "Experimental Web Platform Features" flag as well as via <a href="https://developers.chrome.com/origintrials/#/view_trial/902971725287784449" target="_blank" rel="noopener">Origin Trial</a> in Google Chrome. \n        It allows to specify the resource on which the lock is requested, although currently only <code>screen</code> option is available. The API also allows subscribing to the event when an external factor has interrupted the lock.'],api:"<p><b>Newer specification</b></p>\n      <dl>\n        <dt><code>wakeLock = navigator.wakeLock.request('screen')</code></dt>\n        <dd>Requests a wake lock on the resource specified, such as <code>screen</code> or <code>system</code>. \n        Returns a <code>Promise</code> with the lock managing object.</dd>\n        <dt><code>wakeLock.addEventListener('release', listener)</code></dt>\n        <dd>An event fired when the lock has been released, possibly by external factor such as when user switched to another tab.</dd>\n        <dt><code>wakeLock.release()</code></dt>\n        <dd>Manually releases the existing lock.</dd>\n      </dl>\n      <p><b>Older specification</b></p>\n      <dl>\n        <dt><code>screen.keepAwake = true</code></dt>\n        <dd>The property allowing to acquire a screen wake lock when set to <code>true</code> and release it when set to <code>false</code>.</dd>\n      </dl>",demo:{html:'<p>Wake Lock status: <b id="status">unknown</b>.</p>\n<p>Supported API: <b id="api">none</b>.</p>\n<p><button onclick="toggle()">Toggle</button></p>',js:"function printStatus(status) {\n  document.getElementById(\"status\").innerHTML = status;\n}\n\nlet wakeLockObj = null;\n\nfunction toggle() {\n  if (\"keepAwake\" in screen) {\n    screen.keepAwake = !screen.keepAwake;\n    printStatus(screen.keepAwake ? 'acquired' : 'not acquired');\n  } else if (\"wakeLock\" in navigator) {\n    if (wakeLockObj) {\n      wakeLockObj.release();\n      wakeLockObj = null;\n      printStatus('released');\n    } else {\n      printStatus('acquiring...');\n      navigator.wakeLock.request('screen')\n        .then((wakeLock) => {\n          wakeLockObj = wakeLock;\n          \n          wakeLockObj.addEventListener('release', () => {\n            printStatus('released externally');\n            wakeLockObj = null;\n          })\n          \n          printStatus('acquired');\n        })\n        .catch((err) => {\n          console.error(err);\n          printStatus('failed to acquire: ' + err.message);\n        })\n    }\n  }\n}\n\nif (\"keepAwake\" in screen) {\n  document.getElementById(\"api\").innerHTML = 'screen.keepAwake';\n  printStatus('not acquired');\n} else if (\"wakeLock\" in navigator) {\n  document.getElementById(\"api\").innerHTML = 'navigator.wakeLock';\n  printStatus('not acquired');\n}"},tests:[i.containedIn("screen","undefined"!=typeof window&&window.screen,"keepAwake"),i.navigatorContains("wakeLock")],caniuse:"wake-lock",links:[{url:"https://w3c.github.io/wake-lock/",title:"W3C Specification Draft"},{url:"https://web.dev/wakelock/",title:"Stay awake with the Wake Lock API"}]}),new i({id:"photos",name:"Advanced Camera Controls",description:['The <b>Image Capture API</b> allows Web applications to control the advanced settings of the device\'s camera, such as zoom, white balance, ISO or focus points and take photos based on these settings. It relies on the <code>streamVideoTrack</code> object that might be obtained from the <code>stream</code> - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>capturer = ImageCapture(streamVideoTrack)</code></dt>\n        <dd>Creates an image capturer out of the Media Stream Video Track.</dd>\n        <dt><code>capturer.takePhoto()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the photo taken with the current settings.</dd>\n        <dt><code>capturer.setOptions(photoSettings)</code></dt>\n        <dd>Configures the <code>photoSettings</code> for subsequent captures; if visible, the effects of the configuration can be seen in the Track used as input.</dd>\n      </dl>",tests:[i.windowContains("ImageCapture")],demo:{html:'<p><button onclick="getStream()">Grab video</button></p>\n<p><video autoplay style="height: 180px; width: 240px;"></video></p>\n<p><button onclick="takePhoto()">Take Photo!</button></p>\n<p><img id="imageTag" width="240" height="180"></p>\n\n<p><small>Demo by <a href="http://www.mcasas.tk/" target="_blank" rel="noopener">Miguel Casas-Sanchez</a>.</small></p>',js:"function getUserMedia(options, successCallback, failureCallback) {\n  var api = navigator.getUserMedia || navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia || navigator.msGetUserMedia;\n  if (api) {\n    return api.bind(navigator)(options, successCallback, failureCallback);\n  }\n}\n\nvar theStream;\n\nfunction getStream() {\n  if (!navigator.getUserMedia && !navigator.webkitGetUserMedia &&\n    !navigator.mozGetUserMedia && !navigator.msGetUserMedia) {\n    alert('User Media API not supported.');\n    return;\n  }\n  \n  var constraints = {\n    video: true\n  };\n\n  getUserMedia(constraints, function (stream) {\n    var mediaControl = document.querySelector('video');\n    if ('srcObject' in mediaControl) {\n      mediaControl.srcObject = stream;\n    } else if (navigator.mozGetUserMedia) {\n      mediaControl.mozSrcObject = stream;\n    } else {\n      mediaControl.src = (window.URL || window.webkitURL).createObjectURL(stream);\n    }\n    theStream = stream;\n  }, function (err) {\n    alert('Error: ' + err);\n  });\n}\n\nfunction takePhoto() {\n  if (!('ImageCapture' in window)) {\n    alert('ImageCapture is not available');\n    return;\n  }\n  \n  if (!theStream) {\n    alert('Grab the video stream first!');\n    return;\n  }\n  \n  var theImageCapturer = new ImageCapture(theStream.getVideoTracks()[0]);\n\n  theImageCapturer.takePhoto()\n    .then(blob => {\n      var theImageTag = document.getElementById(\"imageTag\");\n      theImageTag.src = URL.createObjectURL(blob);\n    })\n    .catch(err => alert('Error: ' + err));\n}"},links:[{url:"https://w3c.github.io/mediacapture-image/",title:"W3C Specification Draft"},{url:"https://developers.google.com/web/updates/2016/12/imagecapture",title:"Google Developers: Take Photos and Control Camera Settings"},{url:"https://rawgit.com/Miguelao/demos/master/imagecapture.html",title:"Demo"}]}),new i({id:"presentation",name:"Presentation Features",description:["The <b>Presentation API</b> aims at allowing Web applications to use the presentation display mode. The display used to present\n        may be the same that the browser is using, but may also be the external display device. The browser might serve as the initiator\n        of the presentation as well as receive the connections to the presentations initiated externally on the presentation display.","The API at the moment is supported only in Chrome and Opera, on desktop and on Android."],api:"<dl>\n        <dt><code>navigator.presentation.defaultRequest = new PresentationRequest(presentationUrl)</code></dt>\n        <dd>Sets up an object representing the browser's request for initiating the specified presentation on a presentation display.</dd>\n        <dt><code>request.getAvailability()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object providing availability of a presentation display.</dd>\n        <dt><code>availability.value</code></dt>\n        <dd>Returns a boolean indicating whether a presentation display is available.</dd>\n        <dt><code>availability.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the availability status of a presentation display has changed.</dd>\n        <dt><code>request.start()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the connection to the newly initiated presentation on the presentation display.</dd>\n        <dt><code>connection.state</code></dt>\n        <dd>Returns a string indicating the state of the presentation on the presentation display, i.e. <code>connected</code>, <code>closed</code>, <code>terminated</code>.</dd>\n        <dt><code>connection.addEventListener('statechange', listener)</code></dt>\n        <dd>An event fired when the state of the presentation on the presentation display has changed.</dd>\n        <dt><code>connection.send(message)</code></dt>\n        <dd>Sends a message to the presentation running on the presentation display.</dd>\n        <dt><code>connection.addEventListener('message', listener)</code></dt>\n        <dd>An event fired when a message from the presentation running on the presentation display has been received.</dd>\n        <dt><code>connection.close()</code></dt>\n        <dd>Closes the connection to the presentation running on the presentation display, letting it continue uninterrupted.</dd>\n        <dt><code>connection.terminate()</code></dt>\n        <dd>Terminates the presentation running on the presentation display.</dd>\n        <dt><code>navigator.presentation.receiver.getConnections()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of connections to the presentations running on a presentation display.</dd>\n        <dt><code>navigator.presentation.receiver.addEventListener('connectionavailable', listener)</code></dt>\n        <dd>An event fired when the new connection to the presentations running on a presentation display has become available.</dd>\n      </dl>",tests:[i.navigatorContains("presentation"),i.windowContains("PresentationRequest")],links:[{url:"https://w3c.github.io/presentation-api/",title:"Specification Draft"},{url:"https://www.w3.org/community/webscreens/presentation-api-demos/",title:"Presentation API demos"},{url:"https://developers.google.com/web/updates/2015/11/presentation-api?hl=en",title:"Google Cast for Chrome on Android - using Presentation API underneath"}]}),new i({id:"background-sync",name:"Background Sync",description:["The <b>Background Sync API</b> allows authorized Web applications to not rely on having stable internet connection \n        and defer network-related operations to the moment the connection is available. The API is bound to the Service Worker, which is \n        the code execution model that is separated from the owning Web application. This allows the Background Sync to operate also after \n        the application window was closed.",'The API itself is only a way of signaling the application about the restored connectivity. It might be used together with any\n        <a href="/storage.html">Offline Storage</a> solution to implement a data synchronization scheme or a replay mechanism for \n        the network requests issued when the application was offline',"As of early 2020, the API is only implemented in Chromium-based browsers.",'The specification is complemented with <a href="/scheduler.html">Periodic Background Sync</a> that allows requesting periodic events waking up the Service Worker, useful for automatic data synchronization scenarios.'],api:"<dl>\n        <dt><code>serviceWorkerRegistration.sync.register('syncTag')</code></dt>\n        <dd>Requests an one-off sync registration. Returns a <code>Promise</code> when the request has been registered.</dd>\n        <dt><code>self.addEventListener('sync', listener)</code></dt>\n        <dd>An event fired within the Service Worker instance when there is a connection available and the synchronization is possible. The <code>listener</code> is expected to call <code>event.waitUntil(promise)</code> specifying a <code>Promise</code> that resolves when the sync handling has been completed.</dd>\n      </dl>",tests:[i.windowContains("SyncManager")],caniuse:"background-sync",links:[{url:"https://wicg.github.io/BackgroundSync/spec/",title:"Specification Draft (non-W3C)"},{url:"https://developers.google.com/web/updates/2015/12/background-sync",title:"Google Developers: Introducing Background Sync"}]}),new i({id:"sharing",aliases:["app-communication"],name:"Inter-App Sharing",description:["There were several attempts to establish the universal, multi-platform, asynchronous way of data exchange from the Web applications to native apps or another Web apps. The implementation that is being introduced since 2017, available on Android and iOS, <b>Web Share API</b>, consists of a method to invoke the platform-specific share mechanism, passing named URL to it. Additionally, Google Chrome on Android supports sharing file objects.",'There is a complementary <b>Web Share Target API</b> available in Android since Chrome 71 (late 2018) to allow registering <a href="/installation.html">installed Web Application</a> to be available in the platform-specific share mechanism. It is based on the <code>share_target</code> definition in the app\'s Manifest file. This way the user is able to send data to the specified endpoint in the application from any other application (Web or native) installed in the system.','Historically, There were few basic workarounds used for sending data to another applications that might still be relevant. Native applications can register handlers to receive data from the Web apps using special URL prefixes (although differences exist between <a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW1" target="_blank" rel="noopener">iOS</a> and <a href="https://developer.android.com/training/app-links/index.html" target="_blank" rel="noopener">Android</a>). There are also third-party non-standard services that coordinate sharing data between Web applications.','The first attempt to tackle data sharing from the web – the <b>Web Intents</b> experimental API – was implemented in Google Chrome 18 (in 2012). It was conceptually based on <a href="https://developer.android.com/guide/components/intents-filters.html" target="_blank" rel="noopener">Android Intents</a> system. The apps interested in receiving data were required to be registered in Chrome Web Store and declare the intent support in the manifest file. The apps sending the data were able to invoke the Intent of the particular type and let the system handle the selection of the target application and its proper invocation. The API was removed in Chrome 24 because of various interoperability and usability issues. No other vendor implemented Web Intents.'],api:'<p><b>Web Share API</b></p>\n      <dl>\n        <dt><code>navigator.share({name, title, url, files})</code></dt>\n        <dd>Invokes the system-defined application selection and data share dialog to send the named URL and/or files to another application and returns a <code>Promise</code> resolved when the share was successful.</dd>\n        <dt><code>navigator.canShare({files})</code></dt>\n        <dd>Checks the ability of <code>navigator.share</code> to accept the particular data to be shared, returns <code>true</code> if so. Useful to determine whether file sharing is available.</dd>\n      </dl>\n      \n      <p><b>Web Share Target API</b></p>\n      <p>Addition to Manifest file</p>\n      <pre><code>{\n  "share_target": {\n  "action": "/share-target/",\n  "method": "GET",\n  "enctype": "application/x-www-form-urlencoded",\n  "params": {\n    "title": "title",\n    "text": "text",\n    "url": "url"\n  }\n}</code></pre>\n      \n      <p><b>Web Intents API (obsolete)</b></p>\n      <dl>\n        <dt><code>intent = new Intent(action, type, href)</code></dt>\n        <dd>Creates an object representing the request for a particular action (command) to be sent to the registered handling applications.</dd>\n        <dt><code>navigator.startActivity(intent, onSuccess, onFailure)</code></dt>\n        <dd>Invokes the system-defined application selection and data share dialog to send the request to another application.</dd>\n        <dt><code>window.intent.postResult(result)</code></dt>\n        <dd>Sends the <code>result</code> from the requested (target) application back to the requesting (source) application.</dd>\n      </dl>',tests:[i.navigatorContains("share"),i.navigatorContains("canShare"),i.windowContains("Intent",!1)],caniuse:"web-share",demo:{html:'<p>\n  <button onclick="share()">Share whatwebcando.today<br>with <b>Web Share</b></button>\n</p>\n\n<p>\n  <button onclick="intent()">Share whatwebcando.today<br>with <b>Web Intents</b></button>\n</p>',js:"function share() {\n  if (!(\"share\" in navigator)) {\n    alert('Web Share API not supported.');\n    return;\n  }\n\n  navigator.share({\n      title: 'What Web Can Do Today',\n      text: 'Can I rely on the Web Platform features to build my app? An overview of the device integration HTML5 APIs',\n      url: 'https://whatwebcando.today/'\n    })\n    .then(() => console.log('Successful share'))\n    .catch(error => console.log('Error sharing:', error));\n}\n\nfunction intent() {\n  if (!(\"Intent\" in window)) {\n    alert('Web Intents API not supported.');\n    return;\n  }\n\n  var intent = new Intent('http://webintents.org/share',\n    'text/uri-list',\n    'https://whatwebcando.today');\n  navigator.startActivity(intent, function () {\n    console.log('Successful share')\n  }, function (error) {\n    console.log('Error sharing:', error);\n  });\n}"},links:[{url:"https://wicg.github.io/web-share/",title:"Web Share API Specification"},{url:"https://github.com/WICG/web-share-target",title:"Web Share Target API Specification"},{url:"https://paul.kinlan.me/navigator.share/",title:"Paul Kinlan: Simple sharing on the Web with navigator.share"},{url:"https://paul.kinlan.me/what-happened-to-web-intents/",title:"Paul Kinlan: What happened to Web Intents?"},{url:"https://www.w3.org/TR/web-intents/",title:"W3C Working Group Note about Web Intents"},{url:"https://www.chromium.org/developers/web-intents-in-chrome",title:"Web Intents in Chrome - description from 2012"}]}),new i({id:"recording",name:"Recording Media",description:['The <b>Media Recorder API</b> is a Web API allowing Web applications to record audio and video Media Streams, local and/or remote. It relies on the <code>mediaStream</code> object - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>recorder = new MediaRecorder(mediaStream, options)</code></dt>\n        <dd>Creates a media recorder out of a Media Stream. <code>options</code> selects e.g. the intended <code>MIME type</code> and/or the target bitrates.</dd>\n        <dt><code>MediaRecorder.isMimeTypeSupported(mimeType)</code></dt>\n        <dd>Static function checking if <code>mimeType</code> is, in principle, supported for recording.</dd>\n        <dt><code>recorder.start(interval)</code></dt>\n        <dd>Starts recording data, producing it as chunks in <code>ondataavailable</code>'s <code>event.data</code>, every <code>interval</code> ms, if explicited.</dd>\n      </dl>",tests:[i.windowContains("MediaRecorder")],caniuse:"mediarecorder",demo:{html:'<video autoplay style="height:180px; width: 240px;" poster="https://image.freepik.com/free-icon/video-camera-symbol_318-40225.png"></video>\n<p><button onclick="getStream()">Grab video & start recording</button></p>\n<p><button onclick="download()">Download!</button></p>\n  \n<p><small>Demo by <a href="http://www.mcasas.tk/" target="_blank" rel="noopener">Miguel Casas-Sanchez</a>.</small></p>',cssHidden:"video {\n  background-color: #fff;\n}",js:"function getUserMedia(options, successCallback, failureCallback) {\n  var api = navigator.getUserMedia || navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia || navigator.msGetUserMedia;\n  if (api) {\n    return api.bind(navigator)(options, successCallback, failureCallback);\n  }\n}\n\nvar theStream;\nvar theRecorder;\nvar recordedChunks = [];\n\nfunction getStream() {\n  if (!navigator.getUserMedia && !navigator.webkitGetUserMedia &&\n    !navigator.mozGetUserMedia && !navigator.msGetUserMedia) {\n    alert('User Media API not supported.');\n    return;\n  }\n  \n  var constraints = {video: true, audio: true};\n  getUserMedia(constraints, function (stream) {\n    var mediaControl = document.querySelector('video');\n    \n    if ('srcObject' in mediaControl) {\n      mediaControl.srcObject = stream;\n    } else if (navigator.mozGetUserMedia) {\n      mediaControl.mozSrcObject = stream;\n    } else {\n      mediaControl.src = (window.URL || window.webkitURL).createObjectURL(stream);\n    }\n    \n    theStream = stream;\n    try {\n      recorder = new MediaRecorder(stream, {mimeType : \"video/webm\"});\n    } catch (e) {\n      console.error('Exception while creating MediaRecorder: ' + e);\n      return;\n    }\n    theRecorder = recorder;\n    console.log('MediaRecorder created');\n    recorder.ondataavailable = recorderOnDataAvailable;\n    recorder.start(100);\n  }, function (err) {\n    alert('Error: ' + err);\n  });\n}\n\nfunction recorderOnDataAvailable(event) {\n  if (event.data.size == 0) return;\n  recordedChunks.push(event.data);\n}\n\nfunction download() {\n  console.log('Saving data');\n  theRecorder.stop();\n  theStream.getTracks()[0].stop();\n\n  var blob = new Blob(recordedChunks, {type: \"video/webm\"});\n  var url = (window.URL || window.webkitURL).createObjectURL(blob);\n  var a = document.createElement(\"a\");\n  document.body.appendChild(a);\n  a.style = \"display: none\";\n  a.href = url;\n  a.download = 'test.webm';\n  a.click();\n  \n  // setTimeout() here is needed for Firefox.\n  setTimeout(function () {\n      (window.URL || window.webkitURL).revokeObjectURL(url);\n  }, 100); \n}"},links:[{url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",title:"Specification Draft"},{url:"https://webrtc.github.io/samples/src/content/getusermedia/record/",title:"Demo recording local data"}]}),new i({id:"realtime",name:"Real-Time Communication",description:['Real-Time Communication in the Web, <b>WebRTC</b> in short, is a set of APIs allowing Web applications to send and receive streaming real-time video, audio and data to/from remote peers, without relying it through the centralized server. The server, implementing one of the specific signalling protocols, is needed for initial discovery and connection handshake, though. The APIs rely on the <code>mediaStream</code> object - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>connection = new RTCPeerConnection(configuration)</code></dt>\n        <dd>Creates a connection object that will be used to establish serverless connection between peers. The <code>configuration</code> may include the set of <code>iceServers</code> that will be used for discovery and connection handshake.</dd>\n        <dt><code>connection.addEventListener('icecandidate', listener)</code></dt>\n        <dd>An event fired when the signalling server registers a remote peer with which the connection may be established.</dd>\n        <dt><code>connection.addStream(localMediaStream)</code></dt>\n        <dd>Adds an existing local Media Stream (e.g. the local Web cam) to the remote peer connection.</dd>\n        <dt><code>connection.onaddstream = event => video.src = URL.createObjectURL(event.stream)</code></dt>\n        <dd>Registers an <code>onaddstream</code> event handler that, if and when called, retrieves the remote party's Media Stream and plugs it into a &lt;video> tag <code>video</code>.</dd>\n        <dt><code>connection.createOffer(options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the remote peer connects to the connections and streams offered.</dd>\n        <dt><code>connection.createAnswer(options)</code></dt>\n        <dd>Accepts the connection offered by the remote peer. Returns a <code>Promise</code> resolved when the connection is established.</dd>\n        <dt><code>dataChannel = connection.createDataChannel(label, configuration)</code></dt>\n        <dd>Opens a data channel for the connection, allowing it to transmit arbitrary types of data.</dd>\n        <dt><code>dataChannel.send(data)</code>\n        <dd>Sends the data over the data channel to the remote peer.</dd>\n        <dt><code>dataChannel.addEventListener('message', listener)</code></dt>\n        <dd>An event fired when the data has been received via the data channel.</dd>\n      </dl>",tests:[i.windowContains("RTCPeerConnection")],caniuse:"rtcpeerconnection",demo:{html:'\n<p><button onclick="getStream()">Grab video & start local peer connection</button></p>\n\n<p>Local video</p>\n<video autoplay id="localVideo" style="height:180px; width: 240px;" poster="https://image.freepik.com/free-icon/video-camera-symbol_318-40225.png"></video>\n\n<p>Remote video</p>\n<video autoplay id="remoteVideo" style="height:180px; width: 240px;"></video>\n\n<p><small>Demo by <a href="http://www.mcasas.tk/" target="_blank" rel="noopener">Miguel Casas-Sanchez</a>.</small></p>',cssHidden:"video {\n  background-color: #fff;\n}",js:"function getUserMedia(options, successCallback, failureCallback) {\n  var api = navigator.getUserMedia || navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia || navigator.msGetUserMedia;\n  if (api) {\n    return api.bind(navigator)(options, successCallback, failureCallback);\n  }\n}\n\nvar pc1;\nvar pc2;\nvar theStreamB;\n\nfunction getStream() {\n  if (!navigator.getUserMedia && !navigator.webkitGetUserMedia &&\n    !navigator.mozGetUserMedia && !navigator.msGetUserMedia) {\n    alert('User Media API not supported.');\n    return;\n  }\n  \n  var constraints = {\n    video: true\n  };\n  getUserMedia(constraints, function (stream) {\n    addStreamToVideoTag(stream, 'localVideo');\n\n    // RTCPeerConnection is prefixed in Blink-based browsers.\n    window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n    pc1 = new RTCPeerConnection(null);\n    pc1.addStream(stream);\n    pc1.onicecandidate = event => {\n      if (event.candidate == null) return;\n      pc2.addIceCandidate(new RTCIceCandidate(event.candidate));\n    };\n\n    pc2 = new RTCPeerConnection(null);\n    pc2.onaddstream = event => {\n      theStreamB = event.stream;\n      addStreamToVideoTag(event.stream, 'remoteVideo');\n    };\n    pc2.onicecandidate = event => {\n      if (event.candidate == null) return;\n      pc1.addIceCandidate(new RTCIceCandidate(event.candidate));\n    };\n\n    pc1.createOffer({offerToReceiveVideo: 1})\n      .then(desc => {\n        pc1.setLocalDescription(desc);\n        pc2.setRemoteDescription(desc);\n        return pc2.createAnswer({offerToReceiveVideo: 1});\n      })\n      .then(desc => {\n        pc1.setRemoteDescription(desc);\n        pc2.setLocalDescription(desc);\n      })\n      .catch(err => {\n        console.error('createOffer()/createAnswer() failed ' + err);\n      });\n  }, function (err) {\n    alert('Error: ' + err);\n  });\n}\n\nfunction addStreamToVideoTag(stream, tag) {\n  var mediaControl = document.getElementById(tag);\n  if ('srcObject' in mediaControl) {\n    mediaControl.srcObject = stream;\n  } else if (navigator.mozGetUserMedia) {\n    mediaControl.mozSrcObject = stream;\n  } else {\n    mediaControl.src = (window.URL || window.webkitURL).createObjectURL(stream);\n  }\n}"},links:[{url:"https://w3c.github.io/webrtc-pc/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/webrtc/basics/",title:"HTML5 Rocks: Getting started with WebRTC"},{url:"https://webrtc.github.io/samples/#peerconnection",title:"WebRTC RTCPeerConnection and RTCDataChannel samples"},{url:"https://webrtc.github.io/samples/src/content/peerconnection/pc1/",title:"Simple demo with loopback connection"}]}),new i({id:"geofencing",name:"Geofencing",description:['The <b>Geofencing API</b> allow authorized Web applications to define geographic areas and receive notifications when the device enters or leaves these areas without the need to periodically query the <a href="/geolocation.html">Geolocation API</a>. Thanks to the Service Worker being employed that allows code execution outside of the lifecycle of the owning Web application, the notification may be also received while the app is not opened in the browser.',"As of early 2020, no vendor implemented the API and the proposal seems to be abandoned.",'There is however a new concept under experimentation in Google Chrome that might cover some of the aspects of Geofencing in the future - location-based Notification Triggers. \n    See <a href="/scheduler.html">Task Scheduling</a> for more information.'],api:"<dl>\n        <dt><code>region = new CircularGeofenceRegion({name, latitude, longitude, radius})</code></dt>\n        <dd>Creates a circular region definition with the coordinates and radius specified.</code></dt>\n        <dt><code>serviceWorkerRegistration.geofencing.add(region, options)</code></dt>\n        <dd>Sets up a region to be watched for and subscribes to the notification when the device enters or leaves the region.</dd>\n        <dt><code>self.addEventListener('geofenceenter', listener)</code></dt>\n        <dd>An event fired when the device enters one of the defined regions, provided as <code>event.geofence.region</code>.</dd>\n        <dt><code>self.addEventListener('geofenceleave', listener)</code></dt>\n        <dd>An event fired when the device leaves one of the defined regions, provided as <code>event.geofence.region</code>.</dd>\n      </dl>",tests:[i.windowContains("GeofenceManager")],links:[{url:"https://w3c.github.io/geofencing-api/",title:"Specification Draft"},{url:"https://bugs.chromium.org/p/chromium/issues/detail?id=383125",title:"Chrome Issue tracking the implementation trial and later removal"}]}),new i({id:"payments",name:"Payments",description:["The <b>Payment Request API</b> allows Web applications to delegate the payment checkout process to the operating system, allowing\n      it to use whatever methods and payment providers are natively available for the platform and configured for the user. This approach takes away the burden of handling\n      complex checkout flows at the application side, reduces the scope of the payment provider integration and ensures better familiarity for the user.","With <code>supportedMethods</code> parameter the API allows the Web application to select the supported payment methods - for example only to allow \n      payments processed by a specific 3rd-party provider - as well as configure its parameters. Methods are specified by the predefined identifier or by\n      the 3rd-party URL. Note that the behaviors of the payment methods might vary as it can be defined by a 3rd-party. For example, it can only collect the required details \n      and return it to the requesting Web application, or it might as well proceed with the actual money transfer as a part of the flow.",'At the time, no predefined payments providers exists, although there is a partial browser support for a deprecated <code>basic-card</code> provider that used to exist in the standard and was responsible for collecting the credit card data, without processing the payment itself. It was <a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/fLpgY6iLibo/m/8FpouUKiBAAJ?pli=1" target="_blank" rel="noopener">deprecated in Aug 2021</a>.',"With <code>details</code> parameter the Web application should specify the total amount and currency of the payment. It also allows setting up\n      the order summary information including the subtotals, order items and shipping options.","With <code>options</code> parameter the Web application might specify what kind of customer data it requires to be able to fulfill the request.\n      It may require a shipping address (<code>requestShipping</code>), email (<code>requestPayerEmail</code>), phone (<code>requestPayerPhone</code>) \n      or name (<code>requestPayerName</code>).",'The only payment method available on iOS devices is <a href="https://www.apple.com/apple-pay/" target="_blank" rel="noopener">Apple Pay</a> and it is only functional on devices with fingerprint authentication (Touch ID). It is accessible both via the standard Payment Request API described here as well as the older proprietary non-standard <code>ApplePaySession</code> API.'],api:"<dl>\n        <dt><code>paymentRequest = new PaymentRequest(paymentMethods, details, options)</code></dt>\n        <dd>Creates a payment request object with the requested amounts, currencies and methods configured.</dd>\n        <dt><code>paymentRequest.canMakePayment()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the value indicating if it is possible to conduct a payment using any of the <code>paymentMethods</code> specified.</dd>\n        <dt><code>paymentRequest.show()</code></dt>\n        <dd>Presents the checkout confirmation UI to the user or redirects to the system-defined application that accepts payments by a method selected.\n          Returns a <code>Promise</code> resolved with the <code>response</code> object when the payment is successfully confirmed by the payment provider.\n          Note that it may or may not already denote the money being transferred - it depends on the selected payment method implementation.</dd>\n        <dt><code>request.addEventListener('shippingaddresschange', listener)</code></dt>\n        <dd>An event fired when the user changes the shipping address data, allowing updating the request's <code>details</code> using <code>event.updateWith()</code> method.</dd>\n        <dt><code>request.addEventListener('shippingoptionchange', listener)</code></dt>\n        <dd>An event fired when the user changes the shipping options (delivery vs. pickup etc.), allowing updating the request's <code>details</code> using <code>event.updateWith()</code> method.</dd>\n        <dt><code>event.updateWith(promise)</code></dt>\n        <dd>Waits for a <code>promise</code> to resolve with the new payment details and puts it into the request's <code>details</code>.</dd>\n        <dt><code>response.toJSON()</code></dt>\n        <dd>A convenience method that serializes the payment response (including the requested payment details and the data returned by the provider) into JSON intended to be sent to server-side for order processing.</dd>\n        <dt><code>response.complete(result)</code></dt>\n        <dd>Signals the browser that the app-specific steps of payment processing (like sending the order data to the server-side) has completed. Returns a <code>Promise</code> resolved when the Payment Request UI is cleared.</dd>\n      </dl>",tests:[i.windowContains("PaymentRequest"),i.windowContains("ApplePaySession",!1)],caniuse:"payment-request",demo:{html:'<p><button onclick="donate()">Donate 10€ to What Web Can Do 😉</button> (demo only, no actual payment is processed)</p>\n\n<p id="log"></p>\n\n<p><small>Demo based on <a href="https://googlechrome.github.io/samples/paymentrequest/credit-cards/">Google Chrome GitHub repository</a>.</small></p>',js:"/**\n * Builds PaymentRequest for credit cards, but does not show any UI yet.\n */\nfunction initPaymentRequest() {\n  let networks = ['amex', 'jcb', 'visa', 'maestro', 'mastercard'];\n  \n  let supportedInstruments = [{\n    supportedMethods: 'basic-card', // note that this method is deprecated and its support will be removed\n    data: {\n      supportedNetworks: networks, \n    }\n  }, {\n    supportedMethods: 'https://apple.com/apple-pay',\n    data: {\n        version: 2,\n        supportedNetworks: networks,\n        countryCode: 'US',\n        merchantIdentifier: 'whatwebcando.today.sample',\n        merchantCapabilities: ['supportsDebit', 'supportsCredit', 'supports3DS']\n    }\n  }];\n\n  let details = {\n    total: {label: 'Donation', amount: {currency: 'EUR', value: '10.00'}},\n    displayItems: [\n      {\n        label: 'Original donation amount',\n        amount: {currency: 'EUR', value: '15.00'}\n      },\n      {\n        label: 'Friends and family discount',\n        amount: {currency: 'EUR', value: '-5.00'}\n      }\n    ]\n  };\n\n  return new PaymentRequest(supportedInstruments, details);\n}\n\n/**\n * Invokes PaymentRequest for credit cards.\n */\nfunction onBuyClicked(request) {\n  request.show()\n    .then(instrumentResponse => sendPaymentToServer(instrumentResponse))\n    .catch(err => document.getElementById('log').innerText = err);\n}\n\n/**\n * Simulates processing the payment data on the server.\n */\nfunction sendPaymentToServer(instrumentResponse) {\n  // There's no server-side component of these samples. No transactions are\n  // processed and no money exchanged hands. Instantaneous transactions are not\n  // realistic. Add a 2 second delay to make it seem more real.\n  \n  window.setTimeout(function () {\n    instrumentResponse.complete('success')\n        .then(() => document.getElementById('log').innerHTML = resultToTable(instrumentResponse))\n        .catch(err => document.getElementById('log').innerText = err);\n  }, 2000);\n}\n\n/**\n * Converts the payment instrument into a JSON string.\n */\nfunction resultToTable(result) {\n  return '<table class=\"table table-striped\">' +\n    '<tr><td>Method name</td><td>' + result.methodName + '</td></tr>' +\n    '<tr><td>Billing address</td><td>' + (result.details.billingAddress || {}).addressLine + ', ' + (result.details.billingAddress || {}).city + '</td></tr>' +\n    '<tr><td>Card number</td><td>' + result.details.cardNumber + '</td></tr>' +\n    '<tr><td>Security code</td><td>' + result.details.cardSecurityCode + '</td></tr>' +\n    '<tr><td>Cardholder name</td><td>' + result.details.cardholderName + '</td></tr>' +\n    '<tr><td>Expiry date</td><td>' + result.details.expiryMonth + '/' + result.details.expiryYear + '</td></tr>' +\n    '</table>';\n}\n\nfunction donate() {\n  if (!window.PaymentRequest) {\n    alert('This browser does not support Web Payments API');\n    return;\n  }\n    \n  let request = initPaymentRequest();\n  onBuyClicked(request);\n}"},links:[{url:"https://www.w3.org/TR/payment-request/",title:"Specification"},{url:"https://developers.google.com/web/fundamentals/payments/",title:"Google Developers: Introducing the Payment Request API"},{url:"https://developers.google.com/web/fundamentals/payments/deep-dive-into-payment-request",title:"Google Developers: Deep Dive into the Payment Request API"}]}),new i({id:"credentials",name:"Credentials",description:["The <b>Credential Management API</b> allows authorized Web applications to store and request user credentials (like login and password\n        or federated login data) programmatically on behalf of the user. The API offers a replacement for browser built-in or 3rd-party password stores\n        which allows the Web application to instrument when and how the credentials are stored and read, for example to offer automatic sign-in capability.","When retrieving the previously stored credential, the Web application may decide if the user mediation is expected. When <code>mediation</code>\n       flag is set to <code>silent</code>, the credential will only be resolved if the user had previously stored the single credential for this application.\n       With <code>optional</code> option set, the UI to choose the credential will appear unless there's a single credential stored. Finally, with\n       <code>required</code> option, the UI will always be shown, regardless of the previously stored credentials existence.","As of early 2020, there is also a proposal for the API to address delivering one-time passwords to be used in multiple factor authentication schemes. \n      The earlier version of this API addition was experimentally implemented in Chrome 78-80 for Android within <code>navigator.sms</code> interface.\n      The API relies on the specific message content convention – the message is expected to contain the requesting app's URL. Right now it only defines SMS as a message transport."],api:"<dl>\n        <dt><code>credential = new PasswordCredential(form)</code></dt>\n        <dd>Creates the credential object based on the username and password data detected in a HTML <code>&lt;form&gt;</code> element.</dd>\n        <dt><code>credential = new PasswordCredential({id, password, name, iconURL})</code></dt>\n        <dd>Creates the credential object manually based on the data provided.</dd>\n        <dt><code>credential = new FederatedCredential({id, name, iconURL, provider, protocol})</code></dt>\n        <dd>Creates the credential object based on the federated login service specified with <code>provider</code> and <code>protocol</code> options.</dd>\n        <dt><code>navigator.credentials.store(credential)</code></dt>\n        <dd>Stores the credential provided for future access. Returns a <code>Promise</code> resolved when the credential is successfully persisted by the browser.</dd>\n        <dt><code>navigator.credentials.get({mediation})</code></dt>\n        <dd>Retrieves the previously stored credential from the browser, optionally with user mediation (UI). Returns a <code>Promise</code> resolved with fetched credential or <code>null</code>.</dd>\n        <dt><code>navigator.credentials.preventSilentAccess()</code></dt>\n        <dd>Ensures the user mediation is required on the next credential access request, effectively \"logging out\" the user.</dd>\n      </dl>\n\n      <p><b>Web OTP API (proposal)</b></p>\n\n      <dl>\n        <dt><code>navigator.credentials.get({otp: {transport: ['sms']}})</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the one-time password (code) when the device receives the OTP SMS message containing the requesting URL and the code.</dd>\n      </dl>",tests:[i.asyncRawTest("navigator","credentials",()=>"undefined"!=typeof navigator&&navigator.credentials?navigator.credentials.get({mediation:"silent",unmediated:!0}).then(()=>!0).catch(()=>!1):Promise.resolve(!1)),i.windowContains("OTPCredential")],caniuse:"credential-management",demo:{html:'<div class="columns">\n  <div class="column">\n    <form id="credential-form" onsubmit="storeCredential(event)">\n      <h2>Credentials Management API</h2>\n      <p><b>Store your credentials:</b></p>\n      <p>\n        <label>login: <input type="text" name="username" required autocomplete="username"></label>\n        <label>password: <input type="password" name="password" required autocomplete="current-password"></label>\n      </p>\n      <p><button type="submit">Store credential</button></p>\n    \n      <p class="user-mediation">\n        <b>User mediation:</b><br/>\n        <label><input type="radio" name="mediation" value="silent"> silent</label>\n        <label><input type="radio" name="mediation" value="optional" checked> optional</label>\n        <label><input type="radio" name="mediation" value="required"> required</label>\n      </p>\n      <p><button type="button" onclick="requestCredential()">Request credential</button></p>\n      <p><button type="button" onclick="preventSilentAccess()">Prevent silent access (logout)</button></p>\n      \n      <hr>\n      \n      <h2>Web OTP API</h2>\n      <p><button type="button" onclick="waitForSms()">Wait for OTP SMS</button></p>\n    </form>\n  </div>\n  <div class="column" id="result"></div>\n</div>',js:"function storeCredential() {\n  event.preventDefault();\n\n  if (!navigator.credentials) {\n    alert('Credential Management API not supported');\n    return;\n  }\n  \n  let credentialForm = document.getElementById('credential-form');\n  let credential = new PasswordCredential(credentialForm);\n  navigator.credentials.store(credential)\n    .then(() => log('Storing credential for <b>' + credential.id + '</b> (result cannot be checked by the website).'))\n    .catch((err) => log('Error storing credentials: ' + err));\n}\n\nfunction requestCredential() {\n  if (!navigator.credentials) {\n    alert('Credential Management API not supported');\n    return;\n  }\n  \n  let mediationValue = document.getElementById('credential-form').mediation.value;\n  navigator.credentials.get({password: true, mediation: mediationValue})\n    .then(credential => {\n      let result = 'none';\n      if (credential) {\n        result = credential.id + ', ' + credential.password.replace(/./g, '*');\n      }\n      log('Credential read: <b>' + result + '</b>');\n    })\n    .catch((err) => log('Error reading credentials: ' + err));\n}\n\nfunction preventSilentAccess() {\n  if (!navigator.credentials) {\n    alert('Credential Management API not supported');\n    return;\n  }\n  \n  navigator.credentials.preventSilentAccess()\n    .then(() => log('Silent access prevented (mediation will be required for next credentials.get() call).'))\n    .catch((err) => log('Error preventing silent access: ' + err));\n}\n\nfunction waitForSms() {\n  if ('OTPCredential' in window) {\n    log('Waiting for SMS. Try sending yourself a following message:\\n\\n' +\n        '<pre>Your verification code is: 123ABC\\n\\n<br>' +\n        '@whatwebcando.today #123ABC</pre>');\n  \n    navigator.credentials.get({otp: {transport: ['sms']}})\n      .then((code) => log('Code received: ' + code))\n      .catch((error) => log('SMS receiving error: ' + error));\n  } else {\n    alert('Web OTP API not supported');\n  }\n}\n\nfunction log(info) {\n  var logTarget = document.getElementById('result');\n  var timeBadge = new Date().toTimeString().split(' ')[0];\n  var newInfo = document.createElement('p');\n  newInfo.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> ' + info;\n  logTarget.appendChild(newInfo);\n}",cssHidden:".column {\n  flex: 1 1;\n}\n.user-mediation label {\n  margin-right: 1em;\n}"},links:[{url:"https://w3c.github.io/webappsec-credential-management/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2016/04/credential-management-api",title:"Google Developers: Streamlining the Sign-in Flow Using Credential Management API"},{url:"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe",title:"Sign-in on the Web — Credential Management API and Best Practices"},{url:"https://polykart-credential-payment.appspot.com/",title:"Auto sign-in demo"},{url:"https://wicg.github.io/WebOTP/",title:"Web OTP proposal Specification Draft"}]}),new i({id:"memory",name:"Device Memory",description:["The <b>Device Memory API</b> allows Web applications to assess the class of the device by the size of the RAM memory installed.\n        It might be used to identify the lower-end devices to provide the reduced, lightweight experience of the website for performance reasons.\n        The value provided by the API does not hint how much of the memory is actually available for the application to use - its purpose is only\n        to serve as a device class indication.",'The API consists of two parts. The first is the memory size exposed via the JavaScript property. The second is the <a href="http://httpwg.org/http-extensions/client-hints.html" target="_blank" rel="noopener">Client Hint</a> mechanism of the browser\n        that sends the total device memory information as <code>Device-Memory</code> HTTP request header when the server previously opted-in\n        to receiving this information with <code>Accept-CH: Device Memory</code> HTTP response header, so that the server side might decide to serve \n        the content optimized for the particular class of device.'],api:"<dl>\n        <dt><code>navigator.deviceMemory</code></dt>\n        <dd>Returns the approximate total RAM memory size of the device, in GiB.</dd>\n      </dl>",tests:[i.navigatorContains("deviceMemory")],demo:{html:'Your device memory is ~<b id="result">unknown</b> GiB.',js:"document.getElementById('result').innerHTML = navigator.deviceMemory || 'unknown'"},links:[{url:"https://w3c.github.io/device-memory/",title:"Specification Draft"}]}),new i({id:"usb",name:"USB",description:["The <b>WebUSB API</b> allows Web applications to interact with the Universal Serial Bus-compatible devices available in the system.\n      In order to authorize the application to get the access to the device, user needs to confirm the intent in the browser's UI that in turn may only be \n      initiated with a gesture (for example, a button click, but not automatically by arbitrary JavaScript).",'The API is based on the <a href="http://www.usb.org/developers/docs/" target="_blank" rel="noopener">USB 3.1 specification</a> and exposes all the USB primitives to JavaScript\n       - including configurations, interfaces, endpoints and all the transfer types: CONTROL (suitable for commands), INTERRUPT (suitable for small time-sensitive data), \n       BULK (suitable for large time-sensitive data) and ISOCHRONOUS (suitable for streams, for example media)',"The specification, apart from the JavaScript API, defines a Platform Descriptor object that might be implemented at the device side to advertize its\n      support for WebUSB. Google Chrome's implementation uses it to notify the user about the landing page of the plugged in device with the system notification."],api:'<p><b>Connecting to the device</b></p>\n      <dl>\n        <dt><code>navigator.usb.requestDevice(filters)</code></dt>\n        <dd>Returns the <code>Promise</code> resolved with the device object that matches the specified filter by <a href="http://www.linux-usb.org/usb.ids" target="_blank" rel="noopener">predefined</a>\n         vendor ID, product ID, class or subclass code, protocol code or serial number.</dd>\n        <dt><code>navigator.usb.getDevices()</code></dt>\n        <dd>Returns the <code>Promise</code> resolved with the device objects for the devices previously authorized for this application.</dd>\n        <dt><code>navigator.usb.addEventListener(\'connect\', listener)</code></dt>\n        <dd>An event fired when the already authorized device has been connected to the system, containing the connected device object.</dd>\n        <dt><code>navigator.usb.addEventListener(\'disconnect\', listener)</code></dt>\n        <dd>An event fired when the previously connected device has been disconnected from the system, containing the disconnected device object.</dd>\n      </dl>\n      <p><b>Session setup</b></p>\n      <dl>\n        <dt><code>device.open()</code></dt>\n        <dd>Opens the communication session with the device. Returns a <code>Promise</code> resolved when the session has been opened.</dd>\n        <dt><code>device.close()</code></dt>\n        <dd>Closes the communication session with the device. Returns a <code>Promise</code> resolved when the session has been closed.</dd>\n        <dt><code>device.configurations</code></dt>\n        <dd>Contains the device-provided configuration objects with <code>configurationValue</code> identifier and the list of available <code>interfaces</code>.</dd>\n        <dt><code>device.selectConfiguration(configurationValue)</code></dt>\n        <dd>Selects the configuration of the device. Returns a <code>Promise</code> resolved when the setup has been applied.</dd>\n        <dt><code>device.claimInterface(interfaceNumber)</code></dt>\n        <dd>Claims the interface of the device (by the number specified in <code>configuration.interfaces</code>. Returns a <code>Promise</code> resolved when the setup has been applied.</dd>\n      </dl>\n      <p><b>Data transfers</b></p>\n      <dl>\n        <dt><code>device.controlTransferIn(setup, length)</code></dt>\n        <dd>Waits for a specified control transfer from the device. Returns the <code>Promise</code> resolved with the transfer data and status.</dd>\n        <dt><code>device.controlTransferOut(setup, data)</code></dt>\n        <dd>Sends a specified control transfer to the device. Returns the <code>Promise</code> resolved with the transfer status and the number of bytes written.</dd>\n        <dt><code>device.transferIn(endpointNumber, length)</code></dt>\n        <dd>Waits for a bulk or interrupt transfer from the device on a specified endpoint. Returns the <code>Promise</code> resolved with the transfer data and status.</dd>\n        <dt><code>device.transferOut(endpointNumber, data)</code></dt>\n        <dd>Sends a bulk or interrupt transfer to the specified endpoint of the device. Returns the <code>Promise</code> resolved with the transfer status and the number of bytes written.</dd>\n        <dt><code>device.isochronousTransferIn(endpointNumber, packetLengths)</code></dt>\n        <dd>Waits for a specified isochronous transfer from the device. Returns the <code>Promise</code> resolved with the list of packets received, each containing data and status.</dd>\n        <dt><code>device.isochronousTransferOut(endpointNumber, data, packetLengths)</code></dt>\n        <dd>Sends a specified isochronous transfer to the device. Returns the <code>Promise</code> resolved with the list of packets sent, each containing status and the number of bytes written.</dd>\n      </dl>',tests:[i.navigatorContains("usb")],caniuse:"webusb",demo:{html:'<button id="arduinoButton">Talk to Arduino</button>\n\n<div id="target"></div>\n\n<p><small>Demo from <a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web" target="_blank" rel="noopener">Google Developers</a> article.</small></p>',js:"document.getElementById('arduinoButton').addEventListener('click', function () {\n  if (navigator.usb) {\n    talkToArduino();\n  } else {\n    alert('WebUSB not supported.');\n  }\n});\n\nasync function talkToArduino() {\n  try {\n    let device = await navigator.usb.requestDevice({ filters: [{ vendorId: 0x2341 }] });\n    await device.open(); // Begin a session.\n    await device.selectConfiguration(1); // Select configuration #1 for the device.\n    await device.claimInterface(2); // Request exclusive control over interface #2.\n    await device.controlTransferOut({\n      requestType: 'class',\n      recipient: 'interface',\n      request: 0x22,\n      value: 0x01,\n      index: 0x02\n    });\n  \n    // Ready to receive data\n    let result = device.transferIn(5, 64); // Waiting for 64 bytes of data from endpoint #5.\n    let decoder = new TextDecoder();\n    document.getElementById('target').innerHTML = 'Received: ' + decoder.decode(result.data);\n  } catch (error) {\n    document.getElementById('target').innerHTML = error;\n  }\n}"},links:[{url:"https://wicg.github.io/webusb/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web",title:"Google Developers: Access USB Devices on the Web"}]}),new i({id:"sms",name:"SMS/MMS",description:["Allowing Web applications to gain full access to SMS and MMS messaging system on the device was a goal of <b>Messaging API</b>. \n        It was designed to cover the functionality of the native mobile messaging applications, including browsing, creating and managing the messages.\n        Its early version, different than the later Messaging API proposal, was implemented only on now-defunct Firefox OS and it was the only actual implementation of SMS messaging in the Web - no browser vendor expresses an interest anymore due to privacy and security reasons.",'However, there exists a <b>Web OTP API</b> proposal focusing on the much narrower task of delivering one-time password messages using SMS as a transport\n      – see <a href="/credentials.html">Credentials</a> for details.'],api:"<p><b>Messaging API proposal (never implemented)</b></p>\n      <dl>\n        <dt><code>navigator.messaging.sms.send(number, message, serviceId)</code></dt>\n        <dd>Sends a SMS to a specified number. The sending and delivery status was to be tracked via \n          listening to <code>onsent</code>, <code>ondeliverysuccess</code> and <code>ondeliveryerror</code> events.</dd>\n        <dt><code>navigator.messaging.mms.send(content)</code></dt>\n        <dd>Sends a MMS to a specified number. The sending and delivery status was to be tracked via \n          listening to <code>onsent</code>, <code>ondeliverysuccess</code> and <code>ondeliveryerror</code> events.</dd>\n        <dt><code>navigator.messaging.findMessages(filter, options)</code></dt>\n        <dd>Returns the <code>Promise</code> resolved with the messages matching by the filter provided.</dd>\n      </dl>\n      \n      <p><b>Firefox OS API (now obsolete)</b></p>\n      <dl>\n        <dt><code>navigator.mozSms.send(number, message)</code></dt>\n        <dd>Sends a SMS to a specified number. The sending and delivery status was to be tracked via \n          listening to <code>onsent</code>, <code>ondeliverysuccess</code> and <code>ondeliveryerror</code> events.</dd>\n        <dt><code>navigator.mozSms.getMessages(filter)</code></dt>\n        <dd>Returns the cursor that allows iterating through the messages matching the filter provided.</dd>\n      </dl>\n      ",tests:[i.navigatorContains("messaging")],links:[{url:"https://www.w3.org/TR/messaging/",title:"Messaging API specification proposal (never implemented)"},{url:"https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/API/Mobile_Messaging_API",title:"Firefox OS defunct implementation documentation"}]}),new i({id:"scheduler",name:"Task Scheduling",description:["There is no generic task scheduler available for the Web applications as of early 2020. There are however few active attempts to solve the most prominent use cases for scheduler, separately.",'The first proposal is called <strong>Periodic Background Sync API</strong> and it addresses the background data synchronization use case. It complements the <a href="/background-sync.html">Background Sync</a> capability. It allows the Web applications to register for the periodic event\n    that causes the Service Worker to be woken up and make it possible to execute HTTP request without user interaction.\n    The API, as of early 2020, is experimentally available in Google Chrome 80+ only and its usage is restricted to <a href="/installation.html">installed</a> applications \n    with high enough engagement score. The API does not guarantee the interval of the synchronization – it allows requesting minimum interval via <code>minInterval</code> parameter, although to avoid abuse, the actual interval is dependent on the number of factors\n     such as the network trustworthiness and the frequency the user uses the app.','The second proposal is called <strong>Notification Trigger API</strong>. It is an extension to the existing <a href="/local-notifications.html">Notifications API</a> that allows the\n    local notification to be deferred and scheduled to be shown according to the external trigger – i.e. time- or location-based. The notification needs to be pre-created and the API doesn\'t\n    allow any code to be executed at the trigger. The API is only available in Google Chrome 80+ via <a href="https://developers.chrome.com/origintrials/#/view_trial/6883752030435803137" target="_blank" rel="noopener">Origin Trial</a> experimentation\n    and as of early 2020 is limited to time-based triggers.',"Historically, the earliest attempt to provide the Web applications an ability to be activated according to the system-level scheduler was called <strong>Web Alarms API</strong>. It was abandoned in 2013 in favor of the newer <strong>Task Scheduler API</strong> proposal based on Service Worker primitives\n    that in turn was abandoned as too generic and open for abuse. Its idea was to act as a wrapper for the underlying operating system scheduler and allow authorized Web applications implementing broad scenarios such as alarms, reminders or periodic data synchronization.\n      It was supposed to wake up the system at the specific time or in the first possible moment after the scheduled time and run the user-defined handler within the Service Worker instance."],api:"<p><b>Periodic Background Sync API (experimental)</b></p>\n      <dl>\n        <dt><code>navigator.serviceWorker.getRegistration()</code><br>\n          <code>&nbsp;&nbsp;.then((reg) => reg.periodicSync.register(tag, {minInterval}))</code></dt>\n        <dd>Requests an event to be triggered within the Service Worker instance at the specified minimum interval <code>minInterval</code> with the specified <code>tag</code>.</dd>\n        <dt><code>reg.periodicSync.getTags()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the sync requests already registered by the current application.</dd>\n        <dt><code>self.addEventListener('periodicsync', listener)</code></dt>\n        <dd>An event fired within the Service Worker periodically (at the browser-controlled interval) with the <code>tag</code>, allowing data fetch.</dd>\n      </dl>\n      \n      <p><b>Notification Trigger API (experimental)</b></p>\n      <dl>\n        <dt><code>const trigger = new TimestampTrigger(timestamp)</code></dt>\n        <dd>Creates a time-based trigger that will activate on a given <code>timestamp</code>.</dd>\n        <dt><code>navigator.serviceWorker.getRegistration()</code><br>\n          <code>&nbsp;&nbsp;.then((reg) => reg.showNotification(title, {...options, showTrigger: trigger}))</code></dt>\n        <dd>Schedules a local notification to be shown from within the Service Worker based on the <code>trigger</code>.\n          For other Notification options, see <a href=\"/local-notifications.html\">Local Notifications</a>.</dd>\n      </dl>\n      \n      <p><b>Web Alarms API (never implemented)</b></p>\n      <dl>\n        <dt><code>navigator.serviceWorker.getRegistration()</code><br>\n          <code>&nbsp;&nbsp;.then((reg) => reg.taskScheduler.add(time, [data]))</code></dt>\n        <dd>Schedules an event to be triggered within the Service Worker instance at the specified <code>time</code> with the specified <code>data</code> payload.</dd>\n        <dt><code>reg.taskScheduler.getPendingTasks()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the events already scheduled by the current application.</dd>\n        <dt><code>self.addEventListener('task', listener)</code></dt>\n        <dd>An event fired within the Service Worker at the scheduled time (or as soon as it is possible after) with the <code>task</code> data.</dd>\n      </dl>",demo:{html:'<p><button onclick="scheduleNotification()">Schedule notification in 10s<br>(using Notification Trigger API)</button></p>',js:"function scheduleNotification() {\n  if (!('Notification' in window)) {\n    alert('Notification API not supported');\n    return;\n  }\n  if (!('showTrigger' in Notification.prototype)) {\n    alert('Notification Trigger API not supported');\n    return;\n  }\n  \n  Notification.requestPermission()\n    .then(() => {\n      if (Notification.permission !== 'granted') {\n        throw 'Notification permission is not granted';\n      }\n    })\n    .then(() => navigator.serviceWorker.getRegistration())\n    .then((reg) => {\n      reg.showNotification(\"Hi there from the past!\", {\n          showTrigger: new TimestampTrigger(new Date().getTime() + 10 * 1000)\n      })\n    })\n    .catch((err) => {\n      alert('Notification Trigger API error: ' + err);\n    });\n}"},tests:[i.serviceWorkerRegistrationContains("periodicSync"),i.containedIn("Notification.prototype","undefined"!=typeof window&&window.Notification&&window.Notification.prototype,"showTrigger"),i.serviceWorkerRegistrationContains("taskScheduler",!1),i.navigatorContains("alarms",!1)],links:[{url:"https://webplatformapis.com/periodic_sync/periodicSync_improved.html",title:"Demo application for Periodic Background Sync API"},{url:"https://github.com/WICG/BackgroundSync/blob/master/explainers/periodicsync-explainer.md",title:"Periodic Background Sync API explainer"},{url:"https://web.dev/periodic-background-sync/",title:"Richer offline experiences with the Periodic Background Sync API"},{url:"https://web.dev/notification-triggers/",title:"Notification Trigger API description"},{url:"https://www.w3.org/TR/task-scheduler/",title:"Task Scheduler API specification proposal"},{url:"https://www.w3.org/TR/2013/WD-web-alarms-20130205/",title:"Web Alarms API abandoned proposal"}]}),new i({id:"vr",name:"Virtual & Augmented Reality",description:["The support for Virtual and Augmented Reality for the Web applications as of early 2020 is limited and inconsistent.\n        There are two APIs available. The older one - <b>WebVR API</b> - is available in some browsers for some particular VR environments.\n        The newer one - <b>WebXR Device API</b> - which tries to approach the topic in a more generic fashion, including AR or Mixed Reality devices, is being deployed in Chromium-based browsers starting late 2019.","Both APIs share the same fundamental concepts. Their scope is to allow authorized Web applications to discover available VR/AR devices, \n        establish a session with the device, read the device-specific geometry data required to prepare the proper rendering and bind a <code>&lt;canvas&gt;</code>\n        element as a visual layer onto the device.",'This way the rendering details are handled by the existing canvas interfaces like <a href="https://developer.mozilla.org/pl/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL" target="_blank" rel="noopener">WebGL context</a>\n        and the implementors very often delegate the rendering itself to the specialized libraries like <a href="https://aframe.io/" target="_blank" rel="noopener">A-Frame</a>.'],api:"<p><b>Older WebVR API</b></p>\n      <dl>\n        <dt><code>navigator.getVRDisplays()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the list of available <code>vrDevice</code> objects when they have become available.</dd>\n        <dt><code>vrDevice.capabilities</code></dt>\n        <dd>Lists the capabilities of the current VR device, including <code>hasExternalDisplay</code> or <code>canPresent</code> boolean flags.</dd>\n        <dt><code>vrDevice.requestPresent(layers)</code></dt>\n        <dd>Requests putting the specified visual layers onto VR device's display and starts a session with the device.\n          A layer might be represented by an object containing canvas rendering context that defines the rendering that will be presented (<code>{source: canvasContext}</code>).</dd>\n        <dt><code>vrDevice.getFrameData(frameData)</code></dt>\n        <dd>Fills the passed <code>frameData</code> object with the projection matrices needed to render a frame.</dd>\n        <dt><code>vrDevice.requestAnimationFrame(callback)</code></dt>\n        <dd>Registers a <code>callback</code> that will be executed within the next rendering frame on the VR device.</dd>\n        <dt><code>vrDevice.submitFrame()</code></dt>\n        <dd>Indicates that the layers canvases are ready to be rendered as a frame on the VR device.</dd>\n        <dt><code>vrDevice.exitPresent()</code></dt>\n        <dd>Requests finishing the current session. Returns a <code>Promise</code> resolved when the VR session is finished.</dd>\n      </dl>\n      <p><b>Newer WebXR Device API</b></p>\n      <dl>\n     \n        <dt><code>navigator.xr.isSessionSupported(mode)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with a flag whether the device allows sessions of requested <code>mode</code> – either <code>inline</code> (within HTML) or <code>immersive-vr</code>.</dd>\n        <dt><code>navigator.xr.requestSession(mode, options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the AR/VR device session object <code>xrSession</code> after it has been established in requested <code>mode</code>.</dd>\n        <dt><code>xrSession.requestReferenceSpace(type)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the reference space that provides a coordinate system for the requested type.</dd>\n        <dt><code>xrSession.updateRenderState(state)</code></dt>\n        <dd>Updates the render state to be applied on the next rendering frame, potentially changing the base WebGL layer.</dd>\n        <dt><code>xrSession.requestAnimationFrame(callback)</code></dt>\n        <dd>Registers a <code>callback</code> that will be executed within the next rendering frame within the AR/VR session.</dd>\n        <dt><code>xrSession.end()</code></dt>\n        <dd>Requests finishing the current session. Returns a <code>Promise</code> resolved when the AR/VR session is finished.</dd>\n      </dl>",caniuse:"webxr",tests:[i.navigatorContains("xr"),i.navigatorContains("getVRDisplays")],demo:{html:'<p><button type="button" id="startVRButton">Check for VR device</button></p>\n<ul id="result"></ul>\n<p>\n  <a href="https://immersive-web.github.io/webxr-samples/" target="_blank" rel="noopener">Browse WebXR samples</a><br/>\n  <a href="https://mixedreality.mozilla.org/mobile/" target="_blank" rel="noopener">Browse demos by Mozilla</a>\n</p>',js:"document.getElementById('startVRButton').addEventListener('click', function () {\n  if (navigator.xr) {\n    checkForXR();\n  } else if (navigator.getVRDisplays) {\n    checkForVR();\n  } else {\n    alert('WebXR/WebVR APIs are not supported.');\n  }\n});\n\nasync function checkForXR() {\n    if (!await navigator.xr.isSessionSupported('immersive-vr')) {\n        alert('No immersive VR device detected');\n        return;\n    }\n\n    const session = await navigator.xr.requestSession('immersive-vr');\n    \n    if (!session.inputSources.length) {\n      throw 'VR supported, but no VR input sources available';\n    }\n    \n    const result = document.getElementById('result');\n    result.innerHTML = session.inputSources.length + ' input sources detected';\n}\n        \nasync function checkForVR() {\n  try {\n    const displays = await navigator.getVRDisplays()\n   \n    if (!displays.length) {\n      throw 'VR supported, but no VR displays available';\n    }\n    \n    const result = document.getElementById('result');\n        \n    displays.forEach(function (display) {\n      let li = document.createElement('li');\n      li.innerHTML = display.displayName + ' (' + display.displayId + ')';\n      result.appendChild(li);\n    })\n    \n  } catch (err) {\n    alert(err);\n  }\n}"},links:[{url:"https://immersive-web.github.io/webxr/",title:"WebXR Device API Specification"},{url:"https://github.com/immersive-web/webxr/blob/master/explainer.md",title:"WebXR Device API Explained"},{url:"https://developer.mozilla.org/pl/docs/Web/API/WebXR_Device_API",title:"MDN: WebXR Device API"},{url:"https://immersive-web.github.io/webvr/spec/1.1/",title:"WebVR API Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_the_WebVR_API",title:"MDN: Using the WebVR API"}]}),new i({id:"serial",name:"Serial Port",description:['The <b>Web Serial API</b> allows Web applications to interact with the devices connected to the system via Serial Port.\n      In order to authorize the application to get the access to the device, user needs to confirm the intent in the browser\'s UI that in turn may only be \n      initiated with a gesture (for example, a button click, but not automatically by arbitrary JavaScript). The API exposes the connectivity via a pair of\n       <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" target="_blank" rel="noopener"><code>Stream</code>s</a> – one for reading and one for writing into the serial port.','The specification, as of Spring 2020, is in design phase and early experimental implementations in Google Chrome only. \n      Using it requires participation in <a href="https://developers.chrome.com/origintrials/#/view_trial/2992641952387694593" target="_blank" rel="noopener">Origin Trial</a> program.'],api:'<dl>\n      <dt><code>const port = await navigator.serial.requestPort()</code></dt>\n      <dd>Returns the <code>Promise</code> resolved with the port object representing the connection after user\'s consent.</dd>\n      <dt><code>port.open(options)</code></dt>\n      <dd>Returns the <code>Promise</code> resolved when the system establishes a connection through the serial port.</dd>\n      <dt><code>port.getInfo()</code></dt>\n      <dd>Returns a set of metadata about the connected device, including its serial number, name and manufacturer data.</dd>\n      <dt><code>port.readable</code></dt>\n      <dd>Returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream" target="_blank" rel="noopener"><code>ReadableStream</code></a> representing the data incoming via the serial port.</dd>\n      <dt><code>port.writable</code></dt>\n      <dd>Returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream" target="_blank" rel="noopener"><code>WritableStream</code></a> representing the data being sent from the system via the serial port.</dd>\n    </dl>',tests:[i.navigatorContains("serial")],demo:{html:'<button id="connectButton">Connect via Serial Port</button>\n\n<div id="target"></div>\n\n<p><small>Demo from <a href="https://codelabs.developers.google.com/codelabs/web-serial/" target="_blank" rel="noopener">Google Developers</a> codelabs.</small></p>',js:"document.getElementById('connectButton').addEventListener('click', () => {\n  if (navigator.serial) {\n    connectSerial();\n  } else {\n    alert('Web Serial API not supported.');\n  }\n});\n\nasync function connectSerial() {\n  const log = document.getElementById('target');\n    \n  try {\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudRate: 9600 });\n    \n    const decoder = new TextDecoderStream();\n    \n    port.readable.pipeTo(decoder.writable);\n\n    const inputStream = decoder.readable;\n    const reader = inputStream.getReader();\n    \n    while (true) {\n      const { value, done } = await reader.read();\n      if (value) {\n        log.textContent += value + '\\n';\n      }\n      if (done) {\n        console.log('[readLoop] DONE', done);\n        reader.releaseLock();\n        break;\n      }\n    }\n  \n  } catch (error) {\n    log.innerHTML = error;\n  }\n}"},links:[{url:"https://wicg.github.io/serial/",title:"Specification Draft"},{url:"https://codelabs.developers.google.com/codelabs/web-serial/",title:"Getting started with the Web Serial API – codelabs"}]}),new i({id:"distribution",name:"Store Distribution",description:["Native mobile apps are traditionally distributed through the centralized vendor-provided stores, most notably Google Play on Android and Apple Store on iOS. \n    By its nature, Web applications do not require any distribution platforms, however in order to be able to serve as a complete alternative for native approaches, the ability to distribute the Progressive Web Application (PWA) via the same stores is needed.",'As of Spring 2020, <b>Apple Store</b> does not express any interest in providing this ability, so in order for the Web app to be present in iOS store, it needs to be packaged and wrapped using tools like <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Apache Cordova</a> or <a href="https://phonegap.com/" target="_blank" rel="noopener">Adobe PhoneGap</a>.','On Android, in <b>Google Play</b>, the ability to distribute the PWA exists via <a href="https://developers.google.com/web/android/trusted-web-activity" target="_blank" rel="noopener">Trusted Web Activities</a> (TWA). It\'s a lightweight system-level wrapper that delegates all the code execution to the browser that in turn runs the underlying PWA as if it was opened by the URL.\n    The Web application started via TWA is displayed without any browser UI as long as the website contains a <a href="https://developers.google.com/digital-asset-links/v1/getting-started" target="_blank" rel="noopener">Digital Asset Link</a> file, proving the relationship between the store-distributed app and its underlying Web content.','Submitting PWAs to the store is also possible in <b><a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-edgehtml/microsoft-store" target="_blank" rel="noopener">Microsoft Store</a></b> on Windows,\n      <b><a href="https://developer.kaiostech.com/getting-started/build-your-first-hosted-app/pwa-to-hosted-app" target="_blank" rel="noopener">KaiStore</a></b> on KaiOS and\n      <b><a href="https://medium.com/progressivewebapps/progressive-web-apps-are-now-listed-in-samsung-galaxy-store-d302354caf52" target="_blank" rel="noopener">Galaxy Store</a></b> on Samsung devices.'],api:'<ul>\n    <li><b><a href="https://play.google.com/store/apps/details?id=today.whatwebcando.twa" target="_blank" rel="noopener">What Web Can Do distributed in Google Play</a></b> using Trusted Web Activity,</li>\n    <li><a href="https://github.com/NOtherDev/whatwebcando/tree/master/twa" target="_blank" rel="noopener">Source code</a> of the TWA wrapper,</li>\n    <li><a href="https://github.com/NOtherDev/whatwebcando/blob/master/static/.well-known/assetlinks.json" target="_blank" rel="noopener">Digital Asset Link</a> file proving the relationship.</li>\n  </ul>',tests:[],links:[{url:"https://developers.google.com/web/android/trusted-web-activity/quick-start",title:"Web.dev: Trusted Web Activities Quick Start Guide"},{url:"https://css-tricks.com/how-to-get-a-progressive-web-app-into-the-google-play-store/",title:"How to Get a Progressive Web App into the Google Play Store"},{url:"https://blog.ailon.org/pwa-on-windows-part-1-publishing-your-app-as-is-d884133fc96d",title:"PWA on Windows. Part 1: Publishing Your App As Is"}]}),new i({id:"startup",name:"Run On Startup",description:['The ability to launch the application on system startup or system session log in is traditionally available only for native applications. \n      As of Spring 2020, it is not possible to register a Web application for being started on OS session log in, although the early proposal exists\n      to make it available for the <a href="/installation.html">installed PWAs</a>.',"The proposal, not implemented by any browser yet, defines a new <code>request_on_install</code> property in <b>Web Manifest</b> that would cause the browser to display\n      an additional user consent on adding the PWA to the home screen. If allowed, the Web application would be then automatically launched as if the home screen icon was clicked."],api:'<p><b>Manifest Elements</b></p>\n<pre><code>{\n  request_on_install: ["runonstartup"]\n}</code></pre>',tests:[],links:[{url:"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/RunOnLogin/Explainer.md",title:"Explainer: Allow installed PWA to run on OS login"}]}),new i({id:"freeze-resume",name:"Freeze/Resume Detection",description:['The <b>Page Lifecycle API</b> is an addition to the previously existing page state change events, including <a href="/foreground-detection.html">foreground detection</a> & focus info.\n    It allows Web applications to register for browser-generated events when the inactive application\'s tab is going to be frozen for CPU & battery usage optimization as well as when it is resumed on subsequent activation.',"The API also provides a <code>wasDiscarded</code> flag that enables detecting the scenario when the frozen tab has been discarded (removed from memory) and requires a new page load when being restored.\n    The flag would be set to <code>true</code> for this kind of page loads.","As of Spring 2020, the API is only implemented in Chromium-based browsers."],api:"<dl>\n      <dt><code>document.addEventListener('freeze')</code></dt>\n      <dd>An event fired when the page has been frozen and unloaded by the operating system.</dd>\n      <dt><code>document.addEventListener('resume')</code></dt>\n      <dd>An event fired when the page has been resumed after being frozen by the operating system.</dd>\n      <dt><code>document.wasDiscarded</code></dt>\n      <dd>A boolean flag indicating whether the current load has happened after the web application has been previously discarded.</dd>\n    </dl>",demo:{html:'<p>Was current page load initiated from a discarded state? <b id="wasDiscarded">unknown</b>.</p>\n<p>Change the browser tab state to observe the changes log.</p>\n<div id="target"></div>\n<p><small>Based on the demo from <a href="https://developers.google.com/web/updates/2018/07/page-lifecycle-api" target="_blank" rel="noopener">Google Developers</a>.</small></p>',js:"var target = document.getElementById('target');\n\nif ('wasDiscarded' in document) {\n  document.getElementById('wasDiscarded').innerText = document.wasDiscarded.toString();\n}\n\nfunction getState() {\n  if (document.visibilityState === 'hidden') {\n    return 'hidden';\n  }\n  if (document.hasFocus()) {\n    return 'focused';\n  }\n  return 'not focused';\n};\n\nvar state = getState();\n\nfunction logStateChange(nextState) {\n  var prevState = state;\n  if (nextState !== prevState) {\n    var timeBadge = new Date().toTimeString().split(' ')[0];\n    var newLog = document.createElement('p');\n    newLog.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> State changed from <b>' + prevState + '</b> to <b>' + nextState + '</b>.';\n    target.appendChild(newLog);\n    state = nextState;\n  }\n};\n\nfunction onPageStateChange() {\n  logStateChange(getState())\n}\n\n['pageshow', 'focus', 'blur', 'visibilitychange', 'resume'].forEach(function (type) {\n  window.addEventListener(type, onPageStateChange, {capture: true});\n});\n\nfunction onFreeze() {\n  logStateChange('frozen');\n}\n\nwindow.addEventListener('freeze', onFreeze, {capture: true});\n\nfunction onPageHide(event) {\n  if (event.persisted) {\n    // If the event's persisted property is `true` the page is about\n    // to enter the page navigation cache, which is also in the frozen state.\n    logStateChange('frozen');\n  } else {\n    // If the event's persisted property is not `true` the page is about to be unloaded.\n    logStateChange('terminated');\n  }\n}\n\nwindow.addEventListener('pagehide', onPageHide, {capture: true});\n",jsOnExit:"['pageshow', 'focus', 'blur', 'visibilitychange', 'resume'].forEach(function (type) {\n  window.removeEventListener(type, onPageStateChange, {capture: true});\n});\n\nwindow.removeEventListener('freeze', onFreeze, {capture: true});\nwindow.removeEventListener('pagehide', onPageHide, {capture: true});"},tests:[i.documentContains("onfreeze"),i.documentContains("onresume")],links:[{url:"https://wicg.github.io/page-lifecycle/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2018/07/page-lifecycle-api",title:"Google Developers: Page Lifecycle API"}]}),new i({id:"idle",name:"User Idle Detection",description:['The <b>User Idle API</b> allows the Web application to detect the state when the user isn\'t active, i.e. there is no user-driven events generated in the system or the screen is locked. \n     Contrary to the previous <a href="/foreground-detection.html">Foreground Detection</a> capabilities, this API does not rely on the current tab activity – it detects when the user has been away from the device without locking it or has become inactive, regardless of which tab has been active.','As of Spring 2020, the API is at the early stage proposal, available in Google Chrome only using "Experimental Web Platform Features" flag.','This proposal does not address the system idle state, i.e. the state when the CPU isn\'t busy and previously delayed expensive operations might be initiated. To detect system idle state, the well-supported <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback" target="_blank" rel="noopener">requestIdleCallback</a> API exists.'],api:"<dl>\n      <dt><code>const idleDetector = new IdleDetector(options)</code></dt>\n      <dd>Instantiates the <code>IdleDetector</code> object to be used to listen for events when the user goes idle.</dd>\n      <dt><code>idleDetector.start()</code></dt>\n      <dd>Starts observing for the user being idle.</dd>\n      <dt><code>const state = idleDetector.state</code></dt>\n      <dd>Exposes the current state: the <code>state.user</code> flag describing the user as either <code>active</code> or <code>idle</code>, \n          and <code>state.screen</code> flag describing the display as <code>locked</code> or <code>unlocked</code>.</dd>\n      <dt><code>idleDetector.addEventListener('change', listener)</code></dt>\n      <dd>Register the <code>listener</code> to be called when the user's idle status has changed.</dd>\n    </dl>",demo:{html:'<p><button onclick="startDetector()">Start idle detection</button></p>\n<p>Stop your activity for 60 seconds and/or block the screen to record the idle state changes.</p>\n<div id="target"></div>\n<p><small>Based on the demo from the <a href="https://github.com/samuelgoto/idle-detection" target="_blank" rel="noopener">proposal</a>.</small></p>',js:"var idleDetector;\n\nfunction handleIdleChange() { \n  const timeBadge = new Date().toTimeString().split(' ')[0];\n  const newState = document.createElement('p');\n  const {user, screen} = idleDetector.state;\n  newState.innerHTML = '<span class=\"badge\">' + timeBadge + '</span> User idle status changed to <b>' + user + '</b>. Screen idle status changed to <b>' + screen + '</b>.';\n  target.appendChild(newState);\n}\n    \nfunction startDetector() {\n  if (!window.IdleDetector) {\n    alert(\"Idle Detection API is not available\");\n    return;\n  }\n  \n  const target = document.getElementById('target');\n  \n  try {\n    idleDetector = new IdleDetector({ threshold: 60 });\n    idleDetector.addEventListener('change', handleIdleChange);\n    idleDetector.start();\n  } catch (e) {\n    alert('Idle Detection error:' + e);\n  }\n}",jsOnExit:"if (idleDetector) {\n  idleDetector.removeEventListener('change', handleIdleChange);\n  idleDetector.stop();\n}"},tests:[i.windowContains("IdleDetector")],links:[{url:"https://github.com/samuelgoto/idle-detection",title:"User Idle Detection - API proposal"}]}),new i({id:"shape-detection",name:"Shape Detection",description:["The <b>Shape Detection API</b> is a set of services exposing image processing like OCR (text detection), barcode/QR scanning or face detection\n      capabilities of the underlying system to the Web applications. The availability and quality of the detection varies on the OS & hardware – \n      the API exposes those services as-is.",'The API as of Spring 2020 is at the early experimentation phase. Barcode scanning is available only in Google Chrome 83+. OCR and face detection \n      is available only in Google Chrome via "Experimental Web Platform Features" flag.'],api:"<p><b>Text Detection API</b></p>\n    <dl>\n      <dt><code>const textDetector = new TextDetector()</code></dt>\n      <dd>Instantiates the new <code>TextDetector</code>, exposing OCR processing.</dd>\n      <dt><code>const texts = await textDetector.detect(image)</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with text fragments metadata detected within <code>image</code> provided.</dd>\n    </dl>\n    <p><b>Barcode Detection API</b></p>\n    <dl>\n      <dt><code>const barcodeDetector = new BarcodeDetector({formats})</code></dt>\n      <dd>Instantiates the new <code>BarcodeDetector</code>, exposing barcode reader expecting to read <code>formats</code> specified.</dd>\n      <dt><code>BarcodeDetector.getSupportedFormats()</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with a list of barcode formats supported by the underlying system.</dd>\n      <dt><code>const barcodes = await barcodeDetector.detect(image)</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with barcodes metadata detected within <code>image</code> provided.</dd>\n    </dl>\n    <p><b>Face Detection API</b></p>\n    <dl>\n      <dt><code>const faceDetector = new FaceDetector({maxDetectedFaces, fastMode})</code></dt>\n      <dd>Instantiates the new <code>FaceDetector</code>, exposing face detection service.</dd>\n      <dt><code>const faces = await faceDetector.detect(image)</code></dt>\n      <dd>Returns a <code>Promise</code> resolved with faces metadata detected within <code>image</code> provided.</dd>\n    </dl>",demo:{html:'<p>Upload an image: <input type="file" id="file" accept="image/*" /></p>\n<div>\n  <button onclick="detectText()">Detect Text</button>\n  <button onclick="detectBarcode()">Detect Barcode</button>\n  <button onclick="detectFace()">Detect Face</button>\n</div>\n<div id="target"></div>',js:"function writeLog(message) { \n  const newState = document.createElement('p');\n  newState.innerHTML = message;\n  document.getElementById('target').appendChild(newState);\n}\n\nfunction detectText() {\n  if (!('TextDetector' in window)) {\n    alert('TextDetector is not available');\n    return;\n  }\n  \n  const file = document.getElementById('file').files[0]\n  if (!file) {\n    alert('No image - upload a file first.');\n    return;\n  }\n  \n  document.getElementById('target').innerHTML = '';\n  const detector = new TextDetector();\n  \n  createImageBitmap(file)\n    .then((image) => detector.detect(image))\n    .then((results) => {\n      if (results.length) {\n        results.forEach((result) => {\n          writeLog(`Detected text \"<b>${result.rawValue}</b>\" at (${Math.round(result.boundingBox.x)},${Math.round(result.boundingBox.y)})`);\n        })\n      } else {\n        writeLog('No texts detected.');\n      }\n    })\n    .catch((err) => writeLog('Text detection error: ' + err));\n}\n\nfunction detectBarcode() {\n  if (!('BarcodeDetector' in window)) {\n    alert('BarcodeDetector is not available');\n    return;\n  }\n  \n  const file = document.getElementById('file').files[0]\n  if (!file) {\n    alert('No image - upload a file first.');\n    return;\n  }\n  \n  document.getElementById('target').innerHTML = '';\n  const detector = new BarcodeDetector();\n  \n  createImageBitmap(file)\n    .then((image) => detector.detect(image))\n    .then((results) => {\n      if (results.length) {\n        results.forEach((result) => {\n          writeLog(`Detected text \"<b>${result.rawValue}</b>\" at (${Math.round(result.boundingBox.x)},${Math.round(result.boundingBox.y)})`);\n        })\n      } else {\n        writeLog('No barcodes detected.');\n      }\n    })\n    .catch((err) => writeLog('Barcode detection error: ' + err));\n}\n\nfunction detectFace() {\n  if (!('FaceDetector' in window)) {\n    alert('FaceDetector is not available');\n    return;\n  }\n  \n  const file = document.getElementById('file').files[0]\n  if (!file) {\n    alert('No image - upload a file first.');\n    return;\n  }\n  \n  document.getElementById('target').innerHTML = '';\n  const detector = new FaceDetector();\n  \n  createImageBitmap(file)\n    .then((image) => detector.detect(image))\n    .then((results) => {\n      if (results.length) {\n        results.forEach((result) => {\n          writeLog(`Detected face with <b>${result.landmarks.map((l) => l.type).join()}</b> at (${Math.round(result.boundingBox.x)},${Math.round(result.boundingBox.y)})`);\n        })\n      } else {\n        writeLog('No faces detected.');\n      }\n    })\n    .catch((err) => writeLog('Face detection error: ' + err));\n}"},tests:[i.windowContains("TextDetector"),i.windowContains("BarcodeDetector"),i.windowContains("FaceDetector")],links:[{url:"https://wicg.github.io/shape-detection-api/",title:"Specification Draft"},{url:"https://web.dev/shape-detection/",title:"The Shape Detection API: a picture is worth a thousand words, faces, and barcodes"}]}),new i({id:"eye-dropper",name:"Eye Dropper",description:["The <b>EyeDropper API</b> allows users to catch sample colors from their screen with an eyedropper tool.",'Unlike <code>&lt;input type="color"&gt;</code>  on Chromium-based Desktop browsers, this API offers a simple interface to pick the color of the entire device screen with a standard API.'],api:"<dl>\n      <dt><code>const eyeDropper = new EyeDropper()</code></dt>\n      <dd>Instantiates an <code>EyeDropper</code> object to be used to pick a color.</dd>\n      <dt><code>eyeDropper.open()</code></dt>\n      <dd>Return a promise that resolves to an object that gives access to the selected color (in hexadecimal sRGB format) with the <code>sRGBHex</code> property.</dd>\n      <dt><code>eyeDropper.open({ signal: abortController.signal })</code></dt>\n      <dd>Passing an <code>AbortSignal</code>, the eyeDropper will be aborted when the AbortSignal's <code>abort()</code> method is called.</dd>\n    </dl>",demo:{html:'<div class="column">\n  <p>Click on the image below to activate the dropper</p>\n  <img id="eyeDropperIcon" src="/images/cat.jpg"/>\n  <p>The hex color of the selected pixel is <b><span id="colorCode">???</span></b></p>\n</div>',js:'// Create an EyeDropper object\nlet eyeDropper = new EyeDropper();\n\n// Enter eyedropper mode\nlet icon = document.getElementById("eyeDropperIcon")\nlet color = document.getElementById("colorCode")\n// You may use the dropper only on the cat!\nicon.addEventListener(\'click\', e => {\n    eyeDropper.open()\n    .then(colorSelectionResult => {\n        // returns hex color value (#RRGGBB) of the selected pixel\n        color.innerText = colorSelectionResult.sRGBHex;\n    })\n    .catch(error => {\n        // handle the user choosing to exit eyedropper mode without a selection\n    });\n});\n    ',jsOnExit:""},tests:[i.windowContains("EyeDropper")],links:[{url:"https://github.com/WICG/eyedropper-api/blob/main/README.md",title:"EyeDropper - Explainer"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API",title:"EyeDropper - MDN Documentation"},{url:"https://web.dev/eyedropper/",title:"EyeDropper - Web.dev Article"},{url:"https://fugu-tracker.web.app/?version=0&search=eyedropper",title:"EyeDropper - Fugu API Tracker"}]})];export{a as f};
